{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Muhammad Luqman Hakim Computer science student with interest in machine learning. Passionate about leveraging analytical skills to solve real-world problems and eager to grow alongside innovative teams. \ud83d\udcc4 applied4 13 \ud83d\udccc python from ISLP import load_data \ud83d\udd17 Lihat Markdown \ud83d\udcc4 applied4 14 CV \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown \ud83d\udcc4 applied4 14 \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown \ud83d\udcc4 applied6 9 \ud83d\udccc ```python import numpy as np import pandas as pd \ud83d\udd17 Lihat Markdown \ud83d\udcc4 demo4 \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown \ud83d\udcc4 demo6 2 \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown \ud83d\udcc4 demo6 3 \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown \ud83d\udcc4 demo6 \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown \ud83d\udcc4 Linear Regression from scratch \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown \ud83d\udcc4 LinearSVM and PolynomSVM from scratch \ud83d\udccc # Linear and Polynom SVM from scratch We will create SVM using the loss function and do the gradient descend manually \ud83d\udd17 Lihat Markdown \ud83d\udcc4 Regularization with Lasso and Ridge \ud83d\udccc # Regularization with Lasso and Ridge This is an exercise inspired from \"An Introduction to Statistical Learning\" book on section 6 problem 8. 1. First we will create our own data with uniform distribution and select our own coefficient Y = c1x + c2x^2 + c3x^3 + noise \ud83d\udd17 Lihat Markdown \ud83d\udcc4 Sentiment analysis with SVM and Binomial NB on Presidential Debate \ud83d\udccc # Sentiment analysis with SVM and Binomial NB on Presidential Debate This exercise derived from Data Mining project in my college but i improvise with SVM. My team scraped and manually label the data before, so we just need to do some preprocess. \ud83d\udd17 Lihat Markdown \ud83d\udcc4 Untitled \ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"Home"},{"location":"#muhammad-luqman-hakim","text":"Computer science student with interest in machine learning. Passionate about leveraging analytical skills to solve real-world problems and eager to grow alongside innovative teams.","title":"Muhammad Luqman Hakim"},{"location":"#applied4-13","text":"\ud83d\udccc python from ISLP import load_data \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 applied4 13"},{"location":"#applied4-14-cv","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 applied4 14 CV"},{"location":"#applied4-14","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 applied4 14"},{"location":"#applied6-9","text":"\ud83d\udccc ```python import numpy as np import pandas as pd \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 applied6 9"},{"location":"#demo4","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 demo4"},{"location":"#demo6-2","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 demo6 2"},{"location":"#demo6-3","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 demo6 3"},{"location":"#demo6","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 demo6"},{"location":"#linear-regression-from-scratch","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 Linear Regression from scratch"},{"location":"#linearsvm-and-polynomsvm-from-scratch","text":"\ud83d\udccc # Linear and Polynom SVM from scratch We will create SVM using the loss function and do the gradient descend manually \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 LinearSVM and PolynomSVM from scratch"},{"location":"#regularization-with-lasso-and-ridge","text":"\ud83d\udccc # Regularization with Lasso and Ridge This is an exercise inspired from \"An Introduction to Statistical Learning\" book on section 6 problem 8. 1. First we will create our own data with uniform distribution and select our own coefficient Y = c1x + c2x^2 + c3x^3 + noise \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 Regularization with Lasso and Ridge"},{"location":"#sentiment-analysis-with-svm-and-binomial-nb-on-presidential-debate","text":"\ud83d\udccc # Sentiment analysis with SVM and Binomial NB on Presidential Debate This exercise derived from Data Mining project in my college but i improvise with SVM. My team scraped and manually label the data before, so we just need to do some preprocess. \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 Sentiment analysis with SVM and Binomial NB on Presidential Debate"},{"location":"#untitled","text":"\ud83d\udccc ```python import pandas as pd import numpy as np \ud83d\udd17 Lihat Markdown","title":"\ud83d\udcc4 Untitled"},{"location":"Linear%20Regression%20from%20scratch/","text":"import pandas as pd import numpy as np import seaborn as sns from matplotlib import pyplot as plt from sklearn.datasets import fetch_california_housing data = fetch_california_housing() df = pd.DataFrame(data.data, columns=data.feature_names) df[\"Target\"] = data.target df = df.head(10000) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MedInc HouseAge AveRooms AveBedrms Population AveOccup Latitude Longitude Target 0 8.3252 41.0 6.984127 1.023810 322.0 2.555556 37.88 -122.23 4.526 1 8.3014 21.0 6.238137 0.971880 2401.0 2.109842 37.86 -122.22 3.585 2 7.2574 52.0 8.288136 1.073446 496.0 2.802260 37.85 -122.24 3.521 3 5.6431 52.0 5.817352 1.073059 558.0 2.547945 37.85 -122.25 3.413 4 3.8462 52.0 6.281853 1.081081 565.0 2.181467 37.85 -122.25 3.422 ... ... ... ... ... ... ... ... ... ... 9995 4.0775 10.0 6.140900 1.025440 1275.0 2.495108 39.14 -121.03 1.645 9996 4.0848 8.0 6.350394 1.091864 1977.0 2.594488 39.13 -121.07 1.559 9997 3.6333 7.0 7.243455 1.107330 1143.0 2.992147 39.11 -121.05 1.702 9998 3.4630 8.0 6.363636 1.166297 1307.0 2.898004 39.08 -121.04 2.017 9999 3.0781 7.0 5.487500 1.050000 246.0 3.075000 39.09 -121.00 1.625 10000 rows \u00d7 9 columns df.info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 10000 entries, 0 to 9999 Data columns (total 9 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 MedInc 10000 non-null float64 1 HouseAge 10000 non-null float64 2 AveRooms 10000 non-null float64 3 AveBedrms 10000 non-null float64 4 Population 10000 non-null float64 5 AveOccup 10000 non-null float64 6 Latitude 10000 non-null float64 7 Longitude 10000 non-null float64 8 Target 10000 non-null float64 dtypes: float64(9) memory usage: 703.3 KB df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } MedInc HouseAge AveRooms AveBedrms Population AveOccup Latitude Longitude Target count 10000.000000 10000.000000 10000.000000 10000.000000 10000.000000 10000.000000 10000.000000 10000.000000 10000.00000 mean 3.718040 31.847100 5.212102 1.090389 1395.588700 3.061855 35.493820 -119.472328 2.04949 std 1.916912 11.821967 2.752832 0.547035 1090.838717 6.098183 1.959545 1.808913 1.16595 min 0.499900 1.000000 0.846154 0.500000 3.000000 0.750000 32.670000 -124.350000 0.14999 25% 2.411900 23.000000 4.253385 1.007078 779.750000 2.452830 34.010000 -121.590000 1.17975 50% 3.328900 33.000000 5.031476 1.049645 1137.500000 2.851168 34.170000 -118.410000 1.76600 75% 4.544825 40.000000 5.830935 1.097466 1687.000000 3.373184 37.630000 -118.210000 2.58025 max 15.000100 52.000000 141.909091 34.066667 28566.000000 599.714286 41.950000 -114.550000 5.00001 sns.pairplot(df.head(1000), hue=\"Target\", diag_kind=\"kde\") plt.show() plt.figure(figsize=(10, 6)) sns.heatmap(df.corr(), annot=True, cmap=\"coolwarm\", fmt=\".2f\", linewidths=0.5) plt.show() class LinearRegression: def __init__(self, lmbd=0.1, lr=0.1): self.lmbd = lmbd self.theta = 0 self.theta_0 = 0 self.lr = lr def gradient_fit(self, X_train, Y_train, max_iter=1000): self.theta = np.zeros(X_train.shape[1]) history = [] for _ in range(max_iter): pred = np.dot(X_train, self.theta) + self.theta_0 err = Y_train - pred gradient_theta_0 = -np.mean(err) gradient_theta = -np.dot(X_train.T, err) / X_train.shape[0] + self.lmbd * self.theta self.theta_0 -= self.lr * gradient_theta_0 self.theta -= self.lr * gradient_theta # history.append([self.theta_0] + self.theta) return self.theta_0, self.theta def closed_form_fit(self, X_train, Y_train): X = np.hstack([np.ones((X_train.shape[0], 1)), X_train]) XTX = np.matmul(X.T, X) R = np.identity(XTX.shape[0]) * self.lmbd R[0, 0] = 0 inv = np.linalg.inv(XTX + R) XTY = np.matmul(X.T, Y_train) theta = np.matmul(inv, XTY) self.theta_0 = theta[:1] self.theta = theta[1:] return self.theta_0, self.theta def predict(self, X_test): pred = np.dot(X_test, self.theta) + self.theta_0 return pred # print(Y_test - pred) # return np.mean(np.square(Y_test - pred)) def MSE(self, X_test, Y_test): # print(Y_test - pred) return np.mean(np.square(Y_test - self.predict(X_test))) def score(self, X_train, Y_train): pred = self.predict(X_train) TSS = np.sum(np.square(Y_train - np.mean(Y_train))) RSS = np.sum(np.square(pred - Y_train)) return 1 - RSS/TSS def residual_plot(self, X_test, Y_test): pred = self.predict(X_test) residuals = Y_test - pred fig, ax = plt.subplots(figsize=(8, 6)) ax.scatter(pred, residuals, color=\"blue\", alpha=0.5, label=\"Residuals\", s=1) ax.axhline(y=0, color='red', linestyle=\"--\") ax.set_xlabel(\"Predicted Values\") ax.set_ylabel(\"Residuals\") ax.set_title(\"Residual Plot\") ax.legend() plt.show() # X = df[[\"MedInc\"]] X = df.drop(columns=\"Target\") Y = df[\"Target\"] X = (X - X.mean()) / X.std() Y = (Y - Y.mean()) / Y.std() train = X.index % 2 == 0 test = X.index % 2 == 1 X_train = X[train] Y_train = Y[train] X_test = X[test] Y_test = Y[test] X_train = np.array(X_train) Y_train = np.array(Y_train) X_test = np.array(X_test) Y_test = np.array(Y_test) model = LinearRegression(0.1) model.closed_form_fit(X_train, Y_train) print(model.MSE(X_test, Y_test)) print(model.score(X_train, Y_train)) model.residual_plot(X_test, Y_test) 0.41151109506529826 0.6059167915575893 model.gradient_fit(X_train, Y_train) model.MSE(X_test, Y_test) print(model.MSE(X_test, Y_test)) print(model.score(X_train, Y_train)) 0.43518215741620114 0.5710105260707274","title":"Linear Regression from scratch"},{"location":"LinearSVM%20and%20PolynomSVM%20from%20scratch/","text":"Linear and Polynom SVM from scratch We will create SVM using the loss function and do the gradient descend manually import numpy as np import pandas as pd import seaborn as sns from matplotlib import pyplot as plt from sklearn.model_selection import train_test_split df = pd.read_csv(\"dataset/Iris.csv\", index_col=\"Id\") We use the iris dataset But to make things simple we only classify is it iris setosa or not, because iris versicolor and iris virginica is'nt linearly separable sns.pairplot(df, hue=\"Species\") plt.show() x = np.array(df.drop(columns=[\"Species\", \"SepalLengthCm\", \"SepalWidthCm\"])) y = np.array([s == 'Iris-setosa' for s in df[\"Species\"]]) from sklearn.preprocessing import StandardScaler X_train, X_test, Y_train, Y_test = train_test_split(x, y, stratify=y, random_state=7) # scaler = StandardScaler() # X_train = scaler.fit_transform(X_train) def perceptron(lx, ly, maxiter=1000): theta = np.zeros(len(lx[0]), dtype=float) theta_0 = 0 history = [] for _ in range(maxiter): count = 0 for x, y in zip(lx, ly): y = 1 if bool(y) else -1 z = y * np.dot(theta, x) + theta_0 if z <= 0: theta += y * x theta_0 += y history.append(np.copy(theta)) count += 1 if count == 0: break return theta_0, theta theta_0, theta = perceptron(X_train, Y_train) count = 0 # X_test = scaler.transform(X_test) for x, y in zip(X_test, Y_test): z = theta_0 + np.dot(x, theta) count += ((z > 0) and y) count += ((z < 0) and not y) count/len(Y_test) 0.5263157894736842 theta array([-0.1, -2.2]) theta_0 5 class LinearSVM: def __init__(self, lx, ly): self.theta = np.zeros(len(lx[0]), dtype=float) self.theta_0 = 0 self.lmbd = 0.1 self.lr = 0.001 self.maxiter=1000 self.lx = lx self.ly = ly def transform_data(self, func): self.lx = np.apply_along_axis(func, 1, self.lx) self.theta = np.zeros(len(self.lx[0]), dtype=float) def train(self): history = [] for _ in range(self.maxiter): count = 0 for x, y in zip(self.lx, self.ly): y = 1 if bool(y) else -1 z = 1 - (y * (np.dot(self.theta, x) + self.theta_0)) gradient_theta = self.dregterm_dtheta(x) gradient_theta_0 = 0 if z > 0: gradient_theta += self.dlossterm_dtheta(x, y) gradient_theta_0 += self.dlossterm_dtheta_0(y) count += 1 self.theta -= gradient_theta * self.lr self.theta_0 -= gradient_theta_0 * self.lr history.append(np.copy(self.theta)) # if count == 0: # break # print(history) return self.theta_0, self.theta def dregterm_dtheta(self, x): return self.lmbd * self.theta def dlossterm_dtheta(self, x, y): return -y*x def dlossterm_dtheta_0(self, y): return -y def predict(self, lx_test, ly_test): count = 0 for x, y in zip(lx_test, ly_test): z = self.theta_0 + np.dot(x, self.theta) count += ((z > 0) and y) count += ((z < 0) and not y) return count / len(lx_test) def plot(self): # Plot data points plt.scatter(self.lxx[:, 0], self.lxx[:, 1], c=self.lyy, cmap=plt.cm.Paired, edgecolors='k', label='Data Points') # Plot decision boundary x1 = np.linspace(min(self.lxx[:, 0]), max(self.lxx[:, 0]), 100) x2 = -(self.theta[0] * x1 + self.theta_0) / self.theta[1] plt.plot(x1, x2, 'k-', label='Decision Boundary') # Plot margin boundaries margin = 1 / np.linalg.norm(self.theta) x2_upper = x2 + margin / np.linalg.norm(self.theta) x2_lower = x2 - margin / np.linalg.norm(self.theta) plt.plot(x1, x2_upper, 'k--', label='Margin Boundary', color=\"red\") plt.plot(x1, x2_lower, 'k--', color=\"red\") # Add labels and legend plt.xlabel('Feature 1') plt.ylabel('Feature 2') plt.title('Linear SVM Decision and Margin Boundaries') plt.legend() plt.show() s = LinearSVM(X_train, Y_train) s.train() (-0.8530000000000006, array([-0.83165633, -0.66812085])) s.predict(X_test, Y_test) np.float64(1.0) s.plot() /tmp/ipykernel_4050/4131259921.py:68: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"k--\" (-> color='k'). The keyword argument will take precedence. plt.plot(x1, x2_upper, 'k--', label='Margin Boundary', color=\"red\") /tmp/ipykernel_4050/4131259921.py:69: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"k--\" (-> color='k'). The keyword argument will take precedence. plt.plot(x1, x2_lower, 'k--', color=\"red\") import numpy as np import matplotlib.pyplot as plt class PolynomSVM: def __init__(self, lx, ly): self.copy_lx = lx self.lx = np.apply_along_axis(self.polynom, 1, lx) self.theta = np.zeros(len(self.lx[0]), dtype=float) self.theta_0 = 0 self.lmbd = 0.9 self.lr = 0.001 self.maxiter = 1000 self.ly = ly @staticmethod def polynom(arr): s = np.sqrt(2) return np.array([s * arr[0], s * arr[1], arr[0] ** 2, arr[1] ** 2, s * arr[0] * arr[1], 1]) def train(self): for _ in range(self.maxiter): for x, y in zip(self.lx, self.ly): y = 1 if bool(y) else -1 z = 1 - (y * (np.dot(self.theta, x) + self.theta_0)) gradient_theta = self.lmbd * self.theta gradient_theta_0 = 0 if z > 0: gradient_theta -= y * x gradient_theta_0 -= y self.theta -= gradient_theta * self.lr self.theta_0 -= gradient_theta_0 * self.lr return self.theta_0, self.theta def predict(self, lx_test, ly_test): lx_test = np.apply_along_axis(self.polynom, 1, lx_test) predictions = np.dot(lx_test, self.theta) + self.theta_0 correct_predictions = ((predictions > 0) == ly_test).sum() print((predictions>0).sum()) print(len(lx_test)) return correct_predictions / len(lx_test) def plot(self): x_min, x_max = self.copy_lx[:, 0].min() - 1, self.copy_lx[:, 0].max() + 1 y_min, y_max = self.copy_lx[:, 1].min() - 1, self.copy_lx[:, 1].max() + 1 xx, yy = np.meshgrid(np.linspace(x_min, x_max, 200), np.linspace(y_min, y_max, 200)) grid = np.c_[xx.ravel(), yy.ravel()] grid_transformed = np.apply_along_axis(self.polynom, 1, grid) zz = np.dot(grid_transformed, self.theta) + self.theta_0 zz = zz.reshape(xx.shape) plt.contourf(xx, yy, zz, levels=[-1, 0, 1], alpha=0.2, colors=[\"blue\", \"black\", \"red\"]) plt.contour(xx, yy, zz, levels=[-1, 0, 1], colors=[\"blue\", \"black\", \"red\"], linestyles=[\"dashed\", \"solid\", \"dashed\"]) plt.scatter(self.copy_lx[:, 0], self.copy_lx[:, 1], c=self.ly, cmap=plt.cm.Paired, edgecolors='k') plt.xlabel(\"Feature 1\") plt.ylabel(\"Feature 2\") plt.title(\"Polynomial SVM Decision Boundary\") plt.show() s = PolynomSVM(X_train, Y_train) s.train() (-0.8980000000000007, array([-0.29973561, -0.27545061, 0.1579069 , 0.10840018, 0.19147607, -0.00051781])) s.plot() s.predict(X_test, Y_test) 13 38 np.float64(1.0)","title":"Linear and Polynom SVM from scratch"},{"location":"LinearSVM%20and%20PolynomSVM%20from%20scratch/#linear-and-polynom-svm-from-scratch","text":"We will create SVM using the loss function and do the gradient descend manually import numpy as np import pandas as pd import seaborn as sns from matplotlib import pyplot as plt from sklearn.model_selection import train_test_split df = pd.read_csv(\"dataset/Iris.csv\", index_col=\"Id\")","title":"Linear and Polynom SVM from scratch"},{"location":"LinearSVM%20and%20PolynomSVM%20from%20scratch/#we-use-the-iris-dataset","text":"But to make things simple we only classify is it iris setosa or not, because iris versicolor and iris virginica is'nt linearly separable sns.pairplot(df, hue=\"Species\") plt.show() x = np.array(df.drop(columns=[\"Species\", \"SepalLengthCm\", \"SepalWidthCm\"])) y = np.array([s == 'Iris-setosa' for s in df[\"Species\"]]) from sklearn.preprocessing import StandardScaler X_train, X_test, Y_train, Y_test = train_test_split(x, y, stratify=y, random_state=7) # scaler = StandardScaler() # X_train = scaler.fit_transform(X_train) def perceptron(lx, ly, maxiter=1000): theta = np.zeros(len(lx[0]), dtype=float) theta_0 = 0 history = [] for _ in range(maxiter): count = 0 for x, y in zip(lx, ly): y = 1 if bool(y) else -1 z = y * np.dot(theta, x) + theta_0 if z <= 0: theta += y * x theta_0 += y history.append(np.copy(theta)) count += 1 if count == 0: break return theta_0, theta theta_0, theta = perceptron(X_train, Y_train) count = 0 # X_test = scaler.transform(X_test) for x, y in zip(X_test, Y_test): z = theta_0 + np.dot(x, theta) count += ((z > 0) and y) count += ((z < 0) and not y) count/len(Y_test) 0.5263157894736842 theta array([-0.1, -2.2]) theta_0 5 class LinearSVM: def __init__(self, lx, ly): self.theta = np.zeros(len(lx[0]), dtype=float) self.theta_0 = 0 self.lmbd = 0.1 self.lr = 0.001 self.maxiter=1000 self.lx = lx self.ly = ly def transform_data(self, func): self.lx = np.apply_along_axis(func, 1, self.lx) self.theta = np.zeros(len(self.lx[0]), dtype=float) def train(self): history = [] for _ in range(self.maxiter): count = 0 for x, y in zip(self.lx, self.ly): y = 1 if bool(y) else -1 z = 1 - (y * (np.dot(self.theta, x) + self.theta_0)) gradient_theta = self.dregterm_dtheta(x) gradient_theta_0 = 0 if z > 0: gradient_theta += self.dlossterm_dtheta(x, y) gradient_theta_0 += self.dlossterm_dtheta_0(y) count += 1 self.theta -= gradient_theta * self.lr self.theta_0 -= gradient_theta_0 * self.lr history.append(np.copy(self.theta)) # if count == 0: # break # print(history) return self.theta_0, self.theta def dregterm_dtheta(self, x): return self.lmbd * self.theta def dlossterm_dtheta(self, x, y): return -y*x def dlossterm_dtheta_0(self, y): return -y def predict(self, lx_test, ly_test): count = 0 for x, y in zip(lx_test, ly_test): z = self.theta_0 + np.dot(x, self.theta) count += ((z > 0) and y) count += ((z < 0) and not y) return count / len(lx_test) def plot(self): # Plot data points plt.scatter(self.lxx[:, 0], self.lxx[:, 1], c=self.lyy, cmap=plt.cm.Paired, edgecolors='k', label='Data Points') # Plot decision boundary x1 = np.linspace(min(self.lxx[:, 0]), max(self.lxx[:, 0]), 100) x2 = -(self.theta[0] * x1 + self.theta_0) / self.theta[1] plt.plot(x1, x2, 'k-', label='Decision Boundary') # Plot margin boundaries margin = 1 / np.linalg.norm(self.theta) x2_upper = x2 + margin / np.linalg.norm(self.theta) x2_lower = x2 - margin / np.linalg.norm(self.theta) plt.plot(x1, x2_upper, 'k--', label='Margin Boundary', color=\"red\") plt.plot(x1, x2_lower, 'k--', color=\"red\") # Add labels and legend plt.xlabel('Feature 1') plt.ylabel('Feature 2') plt.title('Linear SVM Decision and Margin Boundaries') plt.legend() plt.show() s = LinearSVM(X_train, Y_train) s.train() (-0.8530000000000006, array([-0.83165633, -0.66812085])) s.predict(X_test, Y_test) np.float64(1.0) s.plot() /tmp/ipykernel_4050/4131259921.py:68: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"k--\" (-> color='k'). The keyword argument will take precedence. plt.plot(x1, x2_upper, 'k--', label='Margin Boundary', color=\"red\") /tmp/ipykernel_4050/4131259921.py:69: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"k--\" (-> color='k'). The keyword argument will take precedence. plt.plot(x1, x2_lower, 'k--', color=\"red\") import numpy as np import matplotlib.pyplot as plt class PolynomSVM: def __init__(self, lx, ly): self.copy_lx = lx self.lx = np.apply_along_axis(self.polynom, 1, lx) self.theta = np.zeros(len(self.lx[0]), dtype=float) self.theta_0 = 0 self.lmbd = 0.9 self.lr = 0.001 self.maxiter = 1000 self.ly = ly @staticmethod def polynom(arr): s = np.sqrt(2) return np.array([s * arr[0], s * arr[1], arr[0] ** 2, arr[1] ** 2, s * arr[0] * arr[1], 1]) def train(self): for _ in range(self.maxiter): for x, y in zip(self.lx, self.ly): y = 1 if bool(y) else -1 z = 1 - (y * (np.dot(self.theta, x) + self.theta_0)) gradient_theta = self.lmbd * self.theta gradient_theta_0 = 0 if z > 0: gradient_theta -= y * x gradient_theta_0 -= y self.theta -= gradient_theta * self.lr self.theta_0 -= gradient_theta_0 * self.lr return self.theta_0, self.theta def predict(self, lx_test, ly_test): lx_test = np.apply_along_axis(self.polynom, 1, lx_test) predictions = np.dot(lx_test, self.theta) + self.theta_0 correct_predictions = ((predictions > 0) == ly_test).sum() print((predictions>0).sum()) print(len(lx_test)) return correct_predictions / len(lx_test) def plot(self): x_min, x_max = self.copy_lx[:, 0].min() - 1, self.copy_lx[:, 0].max() + 1 y_min, y_max = self.copy_lx[:, 1].min() - 1, self.copy_lx[:, 1].max() + 1 xx, yy = np.meshgrid(np.linspace(x_min, x_max, 200), np.linspace(y_min, y_max, 200)) grid = np.c_[xx.ravel(), yy.ravel()] grid_transformed = np.apply_along_axis(self.polynom, 1, grid) zz = np.dot(grid_transformed, self.theta) + self.theta_0 zz = zz.reshape(xx.shape) plt.contourf(xx, yy, zz, levels=[-1, 0, 1], alpha=0.2, colors=[\"blue\", \"black\", \"red\"]) plt.contour(xx, yy, zz, levels=[-1, 0, 1], colors=[\"blue\", \"black\", \"red\"], linestyles=[\"dashed\", \"solid\", \"dashed\"]) plt.scatter(self.copy_lx[:, 0], self.copy_lx[:, 1], c=self.ly, cmap=plt.cm.Paired, edgecolors='k') plt.xlabel(\"Feature 1\") plt.ylabel(\"Feature 2\") plt.title(\"Polynomial SVM Decision Boundary\") plt.show() s = PolynomSVM(X_train, Y_train) s.train() (-0.8980000000000007, array([-0.29973561, -0.27545061, 0.1579069 , 0.10840018, 0.19147607, -0.00051781])) s.plot() s.predict(X_test, Y_test) 13 38 np.float64(1.0)","title":"We use the iris dataset"},{"location":"Regularization%20with%20Lasso%20and%20Ridge/","text":"Regularization with Lasso and Ridge This is an exercise inspired from \"An Introduction to Statistical Learning\" book on section 6 problem 8. 1. First we will create our own data with uniform distribution and select our own coefficient Y = c1x + c2x^2 + c3x^3 + noise 2. Comparing regular least square, ridge, and lasso to model the previously selected coefficient 3. Try reducing training data and increase the number of parameter to see the regularization in action import numpy as np import pandas as pd from matplotlib.pyplot import subplots import sklearn.linear_model as skl import sklearn.model_selection as skm from sklearn.metrics import r2_score as R2, mean_squared_error as MSE 1. Here we create Y = c1x + c2x^2 + c3x^3 + noise We choose c1 = 0.1, c2 = 0.2, and c3 = -7 np.random.seed(0) x = np.random.uniform(-3, 3, size=100) X = np.array([x, x**2, x**3]) theta = np.array([0.1, 0.1, -7]) noise = np.random.normal(scale=30, size=100) Y = np.dot(theta, X) + noise X_train, X_test, y_train, y_test = skm.train_test_split(X.T, Y, test_size=0.2) fig, ax = subplots() ax.scatter(x, Y) <matplotlib.collections.PathCollection at 0x71ea3592b7a0> Next we fit linear regression, ridge, and lasso. for ridge and lasso we do cross validation to determine best regularization parameter (alphas). We cross validate 50 alphas ranging from 10^-4 to 10^8. We also create error bar for each alphas and see the error std from 5-fold CV models. lr = skl.LinearRegression() lr.fit(X_train, y_train) #sk-container-id-4 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-4 { color: var(--sklearn-color-text); } #sk-container-id-4 pre { padding: 0; } #sk-container-id-4 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-4 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-4 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-4 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-4 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-4 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-4 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-4 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-4 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-4 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-4 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-4 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-4 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-4 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-4 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-4 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-4 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-4 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-4 div.sk-label label.sk-toggleable__label, #sk-container-id-4 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-4 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-4 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-4 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-4 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-4 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-4 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-4 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-4 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-4 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LinearRegression() In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LinearRegression ? Documentation for LinearRegression i Fitted LinearRegression() lambdas = 10**np.linspace(8, -4, 50) ridge = skl.RidgeCV(store_cv_results=True, alphas=lambdas) ridge.fit(X_train, y_train) #sk-container-id-5 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-5 { color: var(--sklearn-color-text); } #sk-container-id-5 pre { padding: 0; } #sk-container-id-5 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-5 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-5 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-5 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-5 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-5 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-5 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-5 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-5 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-5 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-5 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-5 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-5 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-5 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-5 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-5 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-5 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-5 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-5 div.sk-label label.sk-toggleable__label, #sk-container-id-5 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-5 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-5 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-5 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-5 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-5 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-5 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-5 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-5 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-5 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. RidgeCV ? Documentation for RidgeCV i Fitted RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) err = ridge.cv_results_.mean(0) fig, ax = subplots() ax.set_title(\"Ridge CV error bar from 5-fold cross validation\") ax.set_xlabel(\"-log(alphas)\") ax.set_ylabel(\"MSE\") ax.errorbar(-np.log10(ridge.alphas), err, yerr=ridge.cv_results_.std(0)/np.sqrt(3)) ax.axvline(-np.log10(ridge.alpha_), ls='--') <matplotlib.lines.Line2D at 0x71ea2c051310> lasso = skl.LassoCV(alphas=lambdas) lasso.fit(X_train, y_train) #sk-container-id-7 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-7 { color: var(--sklearn-color-text); } #sk-container-id-7 pre { padding: 0; } #sk-container-id-7 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-7 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-7 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-7 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-7 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-7 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-7 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-7 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-7 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-7 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-7 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-7 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-7 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-7 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-7 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-7 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-7 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-7 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-7 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-7 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-7 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-7 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-7 div.sk-label label.sk-toggleable__label, #sk-container-id-7 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-7 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-7 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-7 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-7 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-7 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-7 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-7 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-7 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-7 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-7 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-7 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-7 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04])) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LassoCV ? Documentation for LassoCV i Fitted LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04])) err = lasso.mse_path_.mean(1) fig, ax = subplots() ax.set_xlabel(\"-log(alphas)\") ax.set_ylabel(\"MSE\") ax.errorbar(-np.log10(lasso.alphas_), err, yerr=lasso.mse_path_.std(1)/np.sqrt(3)) ax.axvline(-np.log10(lasso.alpha_), ls='--') <matplotlib.lines.Line2D at 0x71ea2bcd7620> Results We see all the method doing well, with about 85% R2. Because the data are not linearly independent and there is enough training data (we use 80% of data), regularization is'nt actually needed here. Lasso is the closest to selected coefficient. it also do variable selection and eliminate x1 and x2 as the previously selected coefficient are close to zero (0.1) lr.coef_, ridge.coef_, lasso.coef_ (array([-1.34480014, -1.42828863, -6.76290371]), array([-1.04400461, -1.01056116, -6.62594185]), array([-0. , -0. , -6.82785986])) lr.intercept_, ridge.intercept_, lasso.intercept_ (10.855330811482283, 9.743354531099754, 6.7171981562675445) R2(lr.predict(X_test), y_test), R2(ridge.predict(X_test), y_test), R2(lasso.predict(X_test), y_test) (0.8585674738446629, 0.8492477120995332, 0.8531453072140727) MSE(lr.predict(X_test), y_test), MSE(ridge.predict(X_test), y_test), MSE(lasso.predict(X_test), y_test) (709.4694629066079, 724.1507926668988, 734.2033857781576) ridge.alpha_, lasso.alpha_ (232.99518105153717, 13.894954943731388) 3. Reducing the training data to 5% We will try to see regularization in action with reducing training data X_train, X_test, y_train, y_test = skm.train_test_split(X.T, Y, test_size=0.95, random_state=7) lr = skl.LinearRegression() lr.fit(X_train, y_train) #sk-container-id-45 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-45 { color: var(--sklearn-color-text); } #sk-container-id-45 pre { padding: 0; } #sk-container-id-45 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-45 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-45 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-45 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-45 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-45 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-45 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-45 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-45 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-45 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-45 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-45 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-45 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-45 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-45 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-45 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-45 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-45 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-45 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-45 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-45 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-45 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-45 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-45 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-45 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-45 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-45 div.sk-label label.sk-toggleable__label, #sk-container-id-45 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-45 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-45 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-45 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-45 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-45 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-45 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-45 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-45 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-45 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-45 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-45 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-45 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LinearRegression() In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LinearRegression ? Documentation for LinearRegression i Fitted LinearRegression() lambdas = 10**np.linspace(8, -4, 50) ridge = skl.RidgeCV(store_cv_results=True, alphas=lambdas) ridge.fit(X_train, y_train) #sk-container-id-46 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-46 { color: var(--sklearn-color-text); } #sk-container-id-46 pre { padding: 0; } #sk-container-id-46 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-46 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-46 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-46 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-46 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-46 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-46 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-46 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-46 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-46 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-46 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-46 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-46 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-46 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-46 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-46 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-46 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-46 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-46 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-46 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-46 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-46 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-46 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-46 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-46 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-46 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-46 div.sk-label label.sk-toggleable__label, #sk-container-id-46 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-46 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-46 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-46 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-46 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-46 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-46 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-46 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-46 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-46 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-46 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-46 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-46 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. RidgeCV ? Documentation for RidgeCV i Fitted RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) lasso = skl.LassoCV(alphas=lambdas) lasso.fit(X_train, y_train) /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.0755285832929076, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 6.7432737100110245, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.874157984353236, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.0295505120977353, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 7.022669248395857, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.990998055406692, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 10.156596903410318, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 7.411234382614303, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.6001418198169475, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( #sk-container-id-47 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-47 { color: var(--sklearn-color-text); } #sk-container-id-47 pre { padding: 0; } #sk-container-id-47 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-47 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-47 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-47 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-47 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-47 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-47 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-47 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-47 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-47 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-47 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-47 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-47 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-47 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-47 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-47 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-47 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-47 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-47 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-47 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-47 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-47 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-47 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-47 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-47 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-47 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-47 div.sk-label label.sk-toggleable__label, #sk-container-id-47 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-47 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-47 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-47 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-47 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-47 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-47 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-47 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-47 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-47 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-47 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-47 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-47 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04])) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LassoCV ? Documentation for LassoCV i Fitted LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04])) Regularization results There is too much variance in this model because we only using 5 points to create a line with 3 variable. Even linear regression model are to overfit for this extreme settings. regularization help us to reduce a variance with tradeoff of some bias. Both ridge and lasso did pretty good with 70% R2. R2(lr.predict(X_test), y_test), R2(ridge.predict(X_test), y_test), R2(lasso.predict(X_test), y_test) (0.3761038971902325, 0.716650314401583, 0.7400452801921802) lr.coef_, ridge.coef_, lasso.coef_ (array([-68.5520653 , -21.42043405, 1.78968729]), array([-11.68913854, -13.61503784, -9.40388045]), array([ -0. , -11.18693772, -11.5483712 ])) ridge.alpha_, lasso.alpha_ (0.8286427728546859, 4.498432668969444)","title":"Regularization with Lasso and Ridge"},{"location":"Regularization%20with%20Lasso%20and%20Ridge/#regularization-with-lasso-and-ridge","text":"This is an exercise inspired from \"An Introduction to Statistical Learning\" book on section 6 problem 8. 1. First we will create our own data with uniform distribution and select our own coefficient Y = c1x + c2x^2 + c3x^3 + noise 2. Comparing regular least square, ridge, and lasso to model the previously selected coefficient 3. Try reducing training data and increase the number of parameter to see the regularization in action import numpy as np import pandas as pd from matplotlib.pyplot import subplots import sklearn.linear_model as skl import sklearn.model_selection as skm from sklearn.metrics import r2_score as R2, mean_squared_error as MSE","title":"Regularization with Lasso and Ridge"},{"location":"Regularization%20with%20Lasso%20and%20Ridge/#1-here-we-create-y-c1x-c2x2-c3x3-noise","text":"We choose c1 = 0.1, c2 = 0.2, and c3 = -7 np.random.seed(0) x = np.random.uniform(-3, 3, size=100) X = np.array([x, x**2, x**3]) theta = np.array([0.1, 0.1, -7]) noise = np.random.normal(scale=30, size=100) Y = np.dot(theta, X) + noise X_train, X_test, y_train, y_test = skm.train_test_split(X.T, Y, test_size=0.2) fig, ax = subplots() ax.scatter(x, Y) <matplotlib.collections.PathCollection at 0x71ea3592b7a0>","title":"1. Here we create Y = c1x + c2x^2 + c3x^3 + noise"},{"location":"Regularization%20with%20Lasso%20and%20Ridge/#next-we-fit-linear-regression-ridge-and-lasso","text":"for ridge and lasso we do cross validation to determine best regularization parameter (alphas). We cross validate 50 alphas ranging from 10^-4 to 10^8. We also create error bar for each alphas and see the error std from 5-fold CV models. lr = skl.LinearRegression() lr.fit(X_train, y_train) #sk-container-id-4 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-4 { color: var(--sklearn-color-text); } #sk-container-id-4 pre { padding: 0; } #sk-container-id-4 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-4 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-4 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-4 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-4 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-4 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-4 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-4 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-4 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-4 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-4 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-4 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-4 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-4 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-4 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-4 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-4 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-4 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-4 div.sk-label label.sk-toggleable__label, #sk-container-id-4 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-4 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-4 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-4 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-4 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-4 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-4 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-4 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-4 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-4 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LinearRegression() In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LinearRegression ? Documentation for LinearRegression i Fitted LinearRegression() lambdas = 10**np.linspace(8, -4, 50) ridge = skl.RidgeCV(store_cv_results=True, alphas=lambdas) ridge.fit(X_train, y_train) #sk-container-id-5 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-5 { color: var(--sklearn-color-text); } #sk-container-id-5 pre { padding: 0; } #sk-container-id-5 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-5 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-5 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-5 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-5 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-5 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-5 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-5 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-5 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-5 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-5 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-5 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-5 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-5 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-5 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-5 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-5 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-5 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-5 div.sk-label label.sk-toggleable__label, #sk-container-id-5 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-5 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-5 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-5 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-5 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-5 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-5 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-5 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-5 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-5 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. RidgeCV ? Documentation for RidgeCV i Fitted RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) err = ridge.cv_results_.mean(0) fig, ax = subplots() ax.set_title(\"Ridge CV error bar from 5-fold cross validation\") ax.set_xlabel(\"-log(alphas)\") ax.set_ylabel(\"MSE\") ax.errorbar(-np.log10(ridge.alphas), err, yerr=ridge.cv_results_.std(0)/np.sqrt(3)) ax.axvline(-np.log10(ridge.alpha_), ls='--') <matplotlib.lines.Line2D at 0x71ea2c051310> lasso = skl.LassoCV(alphas=lambdas) lasso.fit(X_train, y_train) #sk-container-id-7 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-7 { color: var(--sklearn-color-text); } #sk-container-id-7 pre { padding: 0; } #sk-container-id-7 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-7 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-7 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-7 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-7 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-7 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-7 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-7 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-7 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-7 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-7 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-7 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-7 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-7 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-7 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-7 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-7 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-7 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-7 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-7 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-7 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-7 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-7 div.sk-label label.sk-toggleable__label, #sk-container-id-7 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-7 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-7 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-7 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-7 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-7 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-7 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-7 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-7 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-7 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-7 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-7 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-7 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04])) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LassoCV ? Documentation for LassoCV i Fitted LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04])) err = lasso.mse_path_.mean(1) fig, ax = subplots() ax.set_xlabel(\"-log(alphas)\") ax.set_ylabel(\"MSE\") ax.errorbar(-np.log10(lasso.alphas_), err, yerr=lasso.mse_path_.std(1)/np.sqrt(3)) ax.axvline(-np.log10(lasso.alpha_), ls='--') <matplotlib.lines.Line2D at 0x71ea2bcd7620>","title":"Next we fit linear regression, ridge, and lasso."},{"location":"Regularization%20with%20Lasso%20and%20Ridge/#results","text":"We see all the method doing well, with about 85% R2. Because the data are not linearly independent and there is enough training data (we use 80% of data), regularization is'nt actually needed here. Lasso is the closest to selected coefficient. it also do variable selection and eliminate x1 and x2 as the previously selected coefficient are close to zero (0.1) lr.coef_, ridge.coef_, lasso.coef_ (array([-1.34480014, -1.42828863, -6.76290371]), array([-1.04400461, -1.01056116, -6.62594185]), array([-0. , -0. , -6.82785986])) lr.intercept_, ridge.intercept_, lasso.intercept_ (10.855330811482283, 9.743354531099754, 6.7171981562675445) R2(lr.predict(X_test), y_test), R2(ridge.predict(X_test), y_test), R2(lasso.predict(X_test), y_test) (0.8585674738446629, 0.8492477120995332, 0.8531453072140727) MSE(lr.predict(X_test), y_test), MSE(ridge.predict(X_test), y_test), MSE(lasso.predict(X_test), y_test) (709.4694629066079, 724.1507926668988, 734.2033857781576) ridge.alpha_, lasso.alpha_ (232.99518105153717, 13.894954943731388)","title":"Results"},{"location":"Regularization%20with%20Lasso%20and%20Ridge/#3-reducing-the-training-data-to-5","text":"We will try to see regularization in action with reducing training data X_train, X_test, y_train, y_test = skm.train_test_split(X.T, Y, test_size=0.95, random_state=7) lr = skl.LinearRegression() lr.fit(X_train, y_train) #sk-container-id-45 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-45 { color: var(--sklearn-color-text); } #sk-container-id-45 pre { padding: 0; } #sk-container-id-45 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-45 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-45 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-45 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-45 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-45 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-45 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-45 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-45 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-45 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-45 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-45 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-45 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-45 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-45 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-45 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-45 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-45 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-45 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-45 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-45 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-45 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-45 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-45 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-45 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-45 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-45 div.sk-label label.sk-toggleable__label, #sk-container-id-45 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-45 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-45 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-45 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-45 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-45 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-45 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-45 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-45 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-45 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-45 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-45 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-45 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LinearRegression() In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LinearRegression ? Documentation for LinearRegression i Fitted LinearRegression() lambdas = 10**np.linspace(8, -4, 50) ridge = skl.RidgeCV(store_cv_results=True, alphas=lambdas) ridge.fit(X_train, y_train) #sk-container-id-46 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-46 { color: var(--sklearn-color-text); } #sk-container-id-46 pre { padding: 0; } #sk-container-id-46 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-46 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-46 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-46 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-46 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-46 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-46 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-46 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-46 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-46 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-46 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-46 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-46 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-46 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-46 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-46 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-46 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-46 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-46 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-46 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-46 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-46 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-46 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-46 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-46 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-46 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-46 div.sk-label label.sk-toggleable__label, #sk-container-id-46 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-46 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-46 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-46 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-46 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-46 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-46 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-46 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-46 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-46 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-46 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-46 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-46 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. RidgeCV ? Documentation for RidgeCV i Fitted RidgeCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]), store_cv_results=True) lasso = skl.LassoCV(alphas=lambdas) lasso.fit(X_train, y_train) /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.0755285832929076, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 6.7432737100110245, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.874157984353236, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.0295505120977353, tolerance: 2.846651969885279 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 7.022669248395857, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.990998055406692, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 10.156596903410318, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 7.411234382614303, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( /home/luqman/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_coordinate_descent.py:681: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.6001418198169475, tolerance: 2.840656590789062 model = cd_fast.enet_coordinate_descent_gram( #sk-container-id-47 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-47 { color: var(--sklearn-color-text); } #sk-container-id-47 pre { padding: 0; } #sk-container-id-47 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-47 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-47 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-47 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-47 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-47 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-47 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-47 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-47 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-47 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-47 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-47 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-47 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-47 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-47 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-47 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-47 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-47 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-47 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-47 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-47 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-47 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-47 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-47 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-47 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-47 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-47 div.sk-label label.sk-toggleable__label, #sk-container-id-47 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-47 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-47 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-47 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-47 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-47 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-47 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-47 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-47 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-47 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-47 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-47 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-47 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04])) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LassoCV ? Documentation for LassoCV i Fitted LassoCV(alphas=array([1.00000000e+08, 5.68986603e+07, 3.23745754e+07, 1.84206997e+07, 1.04811313e+07, 5.96362332e+06, 3.39322177e+06, 1.93069773e+06, 1.09854114e+06, 6.25055193e+05, 3.55648031e+05, 2.02358965e+05, 1.15139540e+05, 6.55128557e+04, 3.72759372e+04, 2.12095089e+04, 1.20679264e+04, 6.86648845e+03, 3.90693994e+03, 2.22299648e+03, 1.26485522e+03, 7.19685673e+0... 1.32571137e+02, 7.54312006e+01, 4.29193426e+01, 2.44205309e+01, 1.38949549e+01, 7.90604321e+00, 4.49843267e+00, 2.55954792e+00, 1.45634848e+00, 8.28642773e-01, 4.71486636e-01, 2.68269580e-01, 1.52641797e-01, 8.68511374e-02, 4.94171336e-02, 2.81176870e-02, 1.59985872e-02, 9.10298178e-03, 5.17947468e-03, 2.94705170e-03, 1.67683294e-03, 9.54095476e-04, 5.42867544e-04, 3.08884360e-04, 1.75751062e-04, 1.00000000e-04]))","title":"3. Reducing the training data to 5%"},{"location":"Regularization%20with%20Lasso%20and%20Ridge/#regularization-results","text":"There is too much variance in this model because we only using 5 points to create a line with 3 variable. Even linear regression model are to overfit for this extreme settings. regularization help us to reduce a variance with tradeoff of some bias. Both ridge and lasso did pretty good with 70% R2. R2(lr.predict(X_test), y_test), R2(ridge.predict(X_test), y_test), R2(lasso.predict(X_test), y_test) (0.3761038971902325, 0.716650314401583, 0.7400452801921802) lr.coef_, ridge.coef_, lasso.coef_ (array([-68.5520653 , -21.42043405, 1.78968729]), array([-11.68913854, -13.61503784, -9.40388045]), array([ -0. , -11.18693772, -11.5483712 ])) ridge.alpha_, lasso.alpha_ (0.8286427728546859, 4.498432668969444)","title":"Regularization results"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/","text":"Sentiment analysis with SVM and Binomial NB on Presidential Debate This exercise derived from Data Mining project in my college but i improvise with SVM. My team scraped and manually label the data before, so we just need to do some preprocess. import pandas as pd pd.set_option('display.max_colwidth', None) df = pd.read_csv(\"dataset/president_debate.csv\") df = df.dropna() df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } label full_text 0 1.0 Ganjar menyebut pernyataan itu disampaikan Jokowi saat debat Capres di tahun 2019 silam. Saat itu Ganjar merupakan salah satu tim kampanye Jokowi. TAG: Jokowi | Ganjar | anies final stage | prabowo | all in 02 | Ketua KPU | Australia | agak laen | pemilu 2024 | pemilu 2019 https://t.co/QuEav9i1Bw 1 0.0 @pikiranlugu @99propaganda @bengkeldodo @Ndons_Back @BANGSAygSUJUD @_NusantaraLand_ @florieliciouss @are_inismyname @Reskiichsan8 @P4P4B0W0_2024 @AditBandit234 @kurawa Sadar lah kamu Erik jangan nyebar in isu murahan seperti itu..saya juga nonton debat terahir V dan Pak ANIS CAPRES 01 tidak punya Niat ataupun bicara akan meruba BUMN menjadi KOPERASI..VISI MISI pak ANIS RB Jelas.. 2 1.0 @WagimanDeep212_ Dri debat terakhir kemarin nih. Makin mantep dan yakin pilih ganjar mahfud. Gaspolll ykin m3nang 3 0.0 @Dy_NPR Gak perlu kami prihatin dg modelan begini. Sdh sepuh kesehatan entah. Untungnya debat terakhir P Anies berwelas asih dg tidak membuat beliau berkaca2 lagi. Kpn nabgis massal? Bnyk yg nungguin nih https://t.co/e5A9ihPqLP 4 1.0 @tempodotco Selalu suka sama pembawaannya pak Anies yang adem apalagi pas debat semalem beliau keliatan tenang dan sudah mempersiapkan diri banget yuk bisa AMIN 1 putaran aja https://t.co/5RtE6Zop33 ... ... ... 1063 1.0 Tetapi itikad kita baik saya kira 3 paslon semuanya ingin yang terbaik untuk rakyat Indonesia kata Prabowo dalam pernyataan penutupnya di sesi debat kelima Pilpres 2024 yang digelar di Jakarta Convention Center (JCC) Jakarta Minggu (4/2). 1064 1.0 @kompascom @aniesbaswedan Pak Anies berhasil bikin debat semalam jadi punya nuansa berbeda keren parah! 1066 1.0 @kompascom @aniesbaswedan Debat semalam semakin berkesan dengan pesona dan kata-kata positif dari Pak Anies! 1067 1.0 @IDNTimes kalo melihat dari debat capres terakhir kemarin aku bakalan mantepin hatiku buat pilih Ganjar-Mahfud 1068 1.0 @raffimulyaa Nah kalo menurut orang2 debat kemarin gak asik krn ga panas. Menurut gue pak Anies pake strategi yang bagus buat debat terakhir ini. Ada remnya dan mengedepankan apa yang bakal dilakuin sebagai calon presiden kedepan. Masalahnya kl ngegoreng kyk sblmnya dah kelar kewarasan kita 1018 rows \u00d7 2 columns df['label'].value_counts() label 1.0 681 0.0 337 Name: count, dtype: int64 First we downsample the data to stratify the class positive = df[df['label'] == 1].sample(337, random_state=0) negative = df[df['label'] == 0] df = pd.concat([positive, negative]) df.label.value_counts() label 1.0 337 0.0 337 Name: count, dtype: int64 from nltk.corpus import stopwords from nltk.tokenize import word_tokenize import nltk import re nltk.download('punkt_tab') nltk.download('punkt') nltk.download('stopwords') [nltk_data] Downloading package punkt_tab to /home/luqman/nltk_data... [nltk_data] Unzipping tokenizers/punkt_tab.zip. [nltk_data] Downloading package punkt to /home/luqman/nltk_data... [nltk_data] Package punkt is already up-to-date! [nltk_data] Downloading package stopwords to /home/luqman/nltk_data... [nltk_data] Package stopwords is already up-to-date! True Next we clean the data Tweet has username, tag, and links, we will get rid of that. We also need to remove stopword because it not helping us to determine the sentiment so basically reduce the dimension of the model. def preprocess(text): text = text.lower() ## hapus url text = re.sub(r'http\\S+|www.\\S+', '', text) ## hapus username dan hastag text = re.sub(r'@\\w+', '', text) text = re.sub(r'#\\w+', '', text) ## hapus non ascii text = text.encode('ascii', 'ignore').decode('utf-8') ## hapus angka dan tanda baca text = re.sub(r'[^a-zA-Z\\s]', '', text) ## hapus stop word tokens = word_tokenize(text) st = set(stopwords.words('indonesian')) tokens = [word for word in tokens if word not in st] return ' '.join(tokens) df['full_text'] = df['full_text'].apply(preprocess) from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(df['full_text'], df['label'], stratify=df['label'], shuffle=True, random_state=0) Next we do vectorization with tfidf It similar to bag of word but instead of count we do tf*idf which term frequency(simplest: count of that word in that document) * inverse document frequency(how much document have that word accross all documents). When the word is rare the weight is higher, tfidf suit our need to measure different word on how important that word is, so we can decide positive or negative sentiment better. from sklearn.feature_extraction.text import TfidfVectorizer tf = TfidfVectorizer() X_train = tf.fit_transform(X_train) X_test = tf.transform(X_test) X_train.shape (763, 4023) from sklearn.svm import SVC from sklearn.naive_bayes import MultinomialNB, BernoulliNB from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, classification_report Comparing model we compare linear SVM (draw decision line counting only closer/support data), naive bayes (use bayes theorem with assumption all word independent and based on binomial/bernoulli distribution), dan Logistic regression (similar to bernoulli NB but instead using bayes theorem we use gradient descent to model the mean) - It looks like the sentiment is linearly separable and linear svm outperform for this random seed data - BernoulliNB offer more precision with recall trade off - Logistic regression easiest to interpret, we can select most positive/negative weight to see which word is mostly determine positve and negative sentiment. based on logistic regression Top positive words: - ganjar: 1.9254 - mahfud: 1.9136 - mohmahfudmd: 1.4525 - aniesbaswedan: 1.325 Top negative words: - prabowo: -2.0228 - bansos: -1.9204 - apa: -1.4161 - jokowi: -1.1784 linsvm = SVC(kernel='linear') linsvm.fit(X_train, y_train) pred_linsvm = linsvm.predict(X_test) print(classification_report(y_test, pred_linsvm), accuracy_score(y_test, pred_linsvm)) precision recall f1-score support 0.0 0.86 0.88 0.87 85 1.0 0.88 0.86 0.87 84 accuracy 0.87 169 macro avg 0.87 0.87 0.87 169 weighted avg 0.87 0.87 0.87 169 0.8698224852071006 bnb = BernoulliNB() bnb.fit(X_train, y_train) pred_bnb = bnb.predict(X_test) print(classification_report(y_test, pred_bnb), accuracy_score(y_test, pred_bnb)) precision recall f1-score support 0.0 0.91 0.68 0.78 85 1.0 0.74 0.93 0.83 84 accuracy 0.80 169 macro avg 0.82 0.81 0.80 169 weighted avg 0.83 0.80 0.80 169 0.8047337278106509 mnb = MultinomialNB() mnb.fit(X_train, y_train) pred_mnb = mnb.predict(X_test) print(classification_report(y_test, pred_mnb), accuracy_score(y_test, pred_mnb)) precision recall f1-score support 0.0 0.85 0.85 0.85 85 1.0 0.85 0.85 0.85 84 accuracy 0.85 169 macro avg 0.85 0.85 0.85 169 weighted avg 0.85 0.85 0.85 169 0.8461538461538461 lr = LogisticRegression() lr.fit(X_train, y_train) pred_lr = lr.predict(X_test) print(classification_report(y_test, pred_lr), accuracy_score(y_test, pred_lr)) precision recall f1-score support 0.0 0.83 0.65 0.73 84 1.0 0.85 0.94 0.89 171 accuracy 0.84 255 macro avg 0.84 0.80 0.81 255 weighted avg 0.84 0.84 0.84 255 0.8431372549019608 Most \"sentiment\" word feature_names = tf.get_feature_names_out() coefficients = lr.coef_[0] # hanya 1 baris untuk binary classification # Top kata positif dan negatif top_pos = sorted(zip(coefficients, feature_names), reverse=True)[:10] top_neg = sorted(zip(coefficients, feature_names))[:10] print(\"Top positive words:\") for coef, word in top_pos: print(f\"{word}: {coef:.4f}\") print(\"\\nTop negative words:\") for coef, word in top_neg: print(f\"{word}: {coef:.4f}\") Top positive words: ganjar: 1.9254 mahfud: 1.9136 mohmahfudmd: 1.4525 aniesbaswedan: 1.3253 co: 1.3187 pak: 1.3028 https: 1.3028 ganjarmahfud2024: 1.2753 ganjarpranowo: 1.2635 yang: 1.2433 Top negative words: prabowo: -2.0228 bansos: -1.9204 apa: -1.4161 jokowi: -1.1784 aja: -1.1065 ga: -1.0893 covid: -1.0787 19: -1.0573 bermasalah: -1.0573 dikorupsi: -1.0573","title":"Sentiment analysis with SVM and Binomial NB on Presidential Debate"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/#sentiment-analysis-with-svm-and-binomial-nb-on-presidential-debate","text":"This exercise derived from Data Mining project in my college but i improvise with SVM. My team scraped and manually label the data before, so we just need to do some preprocess. import pandas as pd pd.set_option('display.max_colwidth', None) df = pd.read_csv(\"dataset/president_debate.csv\") df = df.dropna() df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } label full_text 0 1.0 Ganjar menyebut pernyataan itu disampaikan Jokowi saat debat Capres di tahun 2019 silam. Saat itu Ganjar merupakan salah satu tim kampanye Jokowi. TAG: Jokowi | Ganjar | anies final stage | prabowo | all in 02 | Ketua KPU | Australia | agak laen | pemilu 2024 | pemilu 2019 https://t.co/QuEav9i1Bw 1 0.0 @pikiranlugu @99propaganda @bengkeldodo @Ndons_Back @BANGSAygSUJUD @_NusantaraLand_ @florieliciouss @are_inismyname @Reskiichsan8 @P4P4B0W0_2024 @AditBandit234 @kurawa Sadar lah kamu Erik jangan nyebar in isu murahan seperti itu..saya juga nonton debat terahir V dan Pak ANIS CAPRES 01 tidak punya Niat ataupun bicara akan meruba BUMN menjadi KOPERASI..VISI MISI pak ANIS RB Jelas.. 2 1.0 @WagimanDeep212_ Dri debat terakhir kemarin nih. Makin mantep dan yakin pilih ganjar mahfud. Gaspolll ykin m3nang 3 0.0 @Dy_NPR Gak perlu kami prihatin dg modelan begini. Sdh sepuh kesehatan entah. Untungnya debat terakhir P Anies berwelas asih dg tidak membuat beliau berkaca2 lagi. Kpn nabgis massal? Bnyk yg nungguin nih https://t.co/e5A9ihPqLP 4 1.0 @tempodotco Selalu suka sama pembawaannya pak Anies yang adem apalagi pas debat semalem beliau keliatan tenang dan sudah mempersiapkan diri banget yuk bisa AMIN 1 putaran aja https://t.co/5RtE6Zop33 ... ... ... 1063 1.0 Tetapi itikad kita baik saya kira 3 paslon semuanya ingin yang terbaik untuk rakyat Indonesia kata Prabowo dalam pernyataan penutupnya di sesi debat kelima Pilpres 2024 yang digelar di Jakarta Convention Center (JCC) Jakarta Minggu (4/2). 1064 1.0 @kompascom @aniesbaswedan Pak Anies berhasil bikin debat semalam jadi punya nuansa berbeda keren parah! 1066 1.0 @kompascom @aniesbaswedan Debat semalam semakin berkesan dengan pesona dan kata-kata positif dari Pak Anies! 1067 1.0 @IDNTimes kalo melihat dari debat capres terakhir kemarin aku bakalan mantepin hatiku buat pilih Ganjar-Mahfud 1068 1.0 @raffimulyaa Nah kalo menurut orang2 debat kemarin gak asik krn ga panas. Menurut gue pak Anies pake strategi yang bagus buat debat terakhir ini. Ada remnya dan mengedepankan apa yang bakal dilakuin sebagai calon presiden kedepan. Masalahnya kl ngegoreng kyk sblmnya dah kelar kewarasan kita 1018 rows \u00d7 2 columns df['label'].value_counts() label 1.0 681 0.0 337 Name: count, dtype: int64","title":"Sentiment analysis with SVM and Binomial NB on Presidential Debate"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/#first-we-downsample-the-data-to-stratify-the-class","text":"positive = df[df['label'] == 1].sample(337, random_state=0) negative = df[df['label'] == 0] df = pd.concat([positive, negative]) df.label.value_counts() label 1.0 337 0.0 337 Name: count, dtype: int64 from nltk.corpus import stopwords from nltk.tokenize import word_tokenize import nltk import re nltk.download('punkt_tab') nltk.download('punkt') nltk.download('stopwords') [nltk_data] Downloading package punkt_tab to /home/luqman/nltk_data... [nltk_data] Unzipping tokenizers/punkt_tab.zip. [nltk_data] Downloading package punkt to /home/luqman/nltk_data... [nltk_data] Package punkt is already up-to-date! [nltk_data] Downloading package stopwords to /home/luqman/nltk_data... [nltk_data] Package stopwords is already up-to-date! True","title":"First we downsample the data to stratify the class"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/#next-we-clean-the-data","text":"Tweet has username, tag, and links, we will get rid of that. We also need to remove stopword because it not helping us to determine the sentiment so basically reduce the dimension of the model. def preprocess(text): text = text.lower() ## hapus url text = re.sub(r'http\\S+|www.\\S+', '', text) ## hapus username dan hastag text = re.sub(r'@\\w+', '', text) text = re.sub(r'#\\w+', '', text) ## hapus non ascii text = text.encode('ascii', 'ignore').decode('utf-8') ## hapus angka dan tanda baca text = re.sub(r'[^a-zA-Z\\s]', '', text) ## hapus stop word tokens = word_tokenize(text) st = set(stopwords.words('indonesian')) tokens = [word for word in tokens if word not in st] return ' '.join(tokens) df['full_text'] = df['full_text'].apply(preprocess) from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(df['full_text'], df['label'], stratify=df['label'], shuffle=True, random_state=0)","title":"Next we clean the data"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/#next-we-do-vectorization-with-tfidf","text":"It similar to bag of word but instead of count we do tf*idf which term frequency(simplest: count of that word in that document) * inverse document frequency(how much document have that word accross all documents). When the word is rare the weight is higher, tfidf suit our need to measure different word on how important that word is, so we can decide positive or negative sentiment better. from sklearn.feature_extraction.text import TfidfVectorizer tf = TfidfVectorizer() X_train = tf.fit_transform(X_train) X_test = tf.transform(X_test) X_train.shape (763, 4023) from sklearn.svm import SVC from sklearn.naive_bayes import MultinomialNB, BernoulliNB from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, classification_report","title":"Next we do vectorization with tfidf"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/#comparing-model","text":"we compare linear SVM (draw decision line counting only closer/support data), naive bayes (use bayes theorem with assumption all word independent and based on binomial/bernoulli distribution), dan Logistic regression (similar to bernoulli NB but instead using bayes theorem we use gradient descent to model the mean) - It looks like the sentiment is linearly separable and linear svm outperform for this random seed data - BernoulliNB offer more precision with recall trade off - Logistic regression easiest to interpret, we can select most positive/negative weight to see which word is mostly determine positve and negative sentiment.","title":"Comparing model"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/#based-on-logistic-regression","text":"Top positive words: - ganjar: 1.9254 - mahfud: 1.9136 - mohmahfudmd: 1.4525 - aniesbaswedan: 1.325 Top negative words: - prabowo: -2.0228 - bansos: -1.9204 - apa: -1.4161 - jokowi: -1.1784 linsvm = SVC(kernel='linear') linsvm.fit(X_train, y_train) pred_linsvm = linsvm.predict(X_test) print(classification_report(y_test, pred_linsvm), accuracy_score(y_test, pred_linsvm)) precision recall f1-score support 0.0 0.86 0.88 0.87 85 1.0 0.88 0.86 0.87 84 accuracy 0.87 169 macro avg 0.87 0.87 0.87 169 weighted avg 0.87 0.87 0.87 169 0.8698224852071006 bnb = BernoulliNB() bnb.fit(X_train, y_train) pred_bnb = bnb.predict(X_test) print(classification_report(y_test, pred_bnb), accuracy_score(y_test, pred_bnb)) precision recall f1-score support 0.0 0.91 0.68 0.78 85 1.0 0.74 0.93 0.83 84 accuracy 0.80 169 macro avg 0.82 0.81 0.80 169 weighted avg 0.83 0.80 0.80 169 0.8047337278106509 mnb = MultinomialNB() mnb.fit(X_train, y_train) pred_mnb = mnb.predict(X_test) print(classification_report(y_test, pred_mnb), accuracy_score(y_test, pred_mnb)) precision recall f1-score support 0.0 0.85 0.85 0.85 85 1.0 0.85 0.85 0.85 84 accuracy 0.85 169 macro avg 0.85 0.85 0.85 169 weighted avg 0.85 0.85 0.85 169 0.8461538461538461 lr = LogisticRegression() lr.fit(X_train, y_train) pred_lr = lr.predict(X_test) print(classification_report(y_test, pred_lr), accuracy_score(y_test, pred_lr)) precision recall f1-score support 0.0 0.83 0.65 0.73 84 1.0 0.85 0.94 0.89 171 accuracy 0.84 255 macro avg 0.84 0.80 0.81 255 weighted avg 0.84 0.84 0.84 255 0.8431372549019608","title":"based on logistic regression"},{"location":"Sentiment%20analysis%20with%20SVM%20and%20Binomial%20NB%20on%20Presidential%20Debate/#most-sentiment-word","text":"feature_names = tf.get_feature_names_out() coefficients = lr.coef_[0] # hanya 1 baris untuk binary classification # Top kata positif dan negatif top_pos = sorted(zip(coefficients, feature_names), reverse=True)[:10] top_neg = sorted(zip(coefficients, feature_names))[:10] print(\"Top positive words:\") for coef, word in top_pos: print(f\"{word}: {coef:.4f}\") print(\"\\nTop negative words:\") for coef, word in top_neg: print(f\"{word}: {coef:.4f}\") Top positive words: ganjar: 1.9254 mahfud: 1.9136 mohmahfudmd: 1.4525 aniesbaswedan: 1.3253 co: 1.3187 pak: 1.3028 https: 1.3028 ganjarmahfud2024: 1.2753 ganjarpranowo: 1.2635 yang: 1.2433 Top negative words: prabowo: -2.0228 bansos: -1.9204 apa: -1.4161 jokowi: -1.1784 aja: -1.1065 ga: -1.0893 covid: -1.0787 19: -1.0573 bermasalah: -1.0573 dikorupsi: -1.0573","title":"Most \"sentiment\" word"},{"location":"Untitled/","text":"import pandas as pd import numpy as np import matplotlib.pyplot as plt import statsmodels.api as sm from statsmodels.stats.outliers_influence \\ import variance_inflation_factor as VIF from statsmodels.stats.anova import anova_lm from ISLP import load_data from ISLP.models import (ModelSpec as MS, summarize, poly) df = pd.read_csv(\"../dataset/Auto.csv\", na_values='?') df = df.dropna() df = df.iloc[20:,:] df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mpg cylinders displacement horsepower weight acceleration year origin name 20 25.0 4 110.0 87.0 2672 17.5 70 2 peugeot 504 21 24.0 4 107.0 90.0 2430 14.5 70 2 audi 100 ls 22 25.0 4 104.0 95.0 2375 17.5 70 2 saab 99e 23 26.0 4 121.0 113.0 2234 12.5 70 2 bmw 2002 24 21.0 6 199.0 90.0 2648 15.0 70 1 amc gremlin ... ... ... ... ... ... ... ... ... ... 392 27.0 4 140.0 86.0 2790 15.6 82 1 ford mustang gl 393 44.0 4 97.0 52.0 2130 24.6 82 2 vw pickup 394 32.0 4 135.0 84.0 2295 11.6 82 1 dodge rampage 395 28.0 4 120.0 79.0 2625 18.6 82 1 ford ranger 396 31.0 4 119.0 82.0 2720 19.4 82 1 chevy s-10 372 rows \u00d7 9 columns print(df.info()) print(df.describe()) <class 'pandas.core.frame.DataFrame'> Index: 392 entries, 0 to 396 Data columns (total 9 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 mpg 392 non-null float64 1 cylinders 392 non-null int64 2 displacement 392 non-null float64 3 horsepower 392 non-null float64 4 weight 392 non-null int64 5 acceleration 392 non-null float64 6 year 392 non-null int64 7 origin 392 non-null int64 8 name 392 non-null object dtypes: float64(4), int64(4), object(1) memory usage: 30.6+ KB None mpg cylinders displacement horsepower weight \\ count 392.000000 392.000000 392.000000 392.000000 392.000000 mean 23.445918 5.471939 194.411990 104.469388 2977.584184 std 7.805007 1.705783 104.644004 38.491160 849.402560 min 9.000000 3.000000 68.000000 46.000000 1613.000000 25% 17.000000 4.000000 105.000000 75.000000 2225.250000 50% 22.750000 4.000000 151.000000 93.500000 2803.500000 75% 29.000000 8.000000 275.750000 126.000000 3614.750000 max 46.600000 8.000000 455.000000 230.000000 5140.000000 acceleration year origin count 392.000000 392.000000 392.000000 mean 15.541327 75.979592 1.576531 std 2.758864 3.683737 0.805518 min 8.000000 70.000000 1.000000 25% 13.775000 73.000000 1.000000 50% 15.500000 76.000000 1.000000 75% 17.025000 79.000000 2.000000 max 24.800000 82.000000 3.000000 plt.scatter(df[\"horsepower\"], df[\"mpg\"]) <matplotlib.collections.PathCollection at 0x7482ad90a9c0> X = pd.DataFrame({\"intercept\": np.ones(df.shape[0]), \"horsepower\": df[\"horsepower\"]}) X.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } intercept horsepower 20 1.0 87.0 21 1.0 90.0 22 1.0 95.0 23 1.0 113.0 24 1.0 90.0 model = sm.OLS(df[\"mpg\"], X) result = model.fit() summarize(result) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } coef std err t P>|t| intercept 41.1259 0.758 54.222 0.0 horsepower -0.1702 0.007 -24.281 0.0 result.params intercept 41.125860 horsepower -0.170189 dtype: float64 fig, ax = plt.subplots() ax.scatter(df[\"horsepower\"], df[\"mpg\"], s=5) coef = result.params xlim = ax.get_xlim() ylim = (coef[0] + coef[1] * xlim[0], coef[0] + coef[1] * xlim[1]) ax.plot(xlim, ylim, 'r-') ax.set_title(coef) /tmp/ipykernel_152811/4053741418.py:6: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]` ylim = (coef[0] + coef[1] * xlim[0], coef[0] + coef[1] * xlim[1]) Text(0.5, 1.0, 'intercept 41.125860\\nhorsepower -0.170189\\ndtype: float64') # confidence interval params = np.array(result.params) stderr = np.array(summarize(result)['std err']) def conf_interval(params, stderr, x): low = np.dot((params - stderr), x) high = np.dot((params + stderr), x) return low, high conf_interval(params, stderr, [1, 98]) (23.003374498935447, 25.891374498935456) pred = result.get_prediction([1, 98]) pred.conf_int(alpha=0.05) array([[23.947671, 24.947078]]) ax = plt.subplots(figsize=(8,8))[1] ax.scatter(result.fittedvalues, result.resid) ax.set_xlabel('Fitted value') ax.set_ylabel('Residual') ax.axhline(0, c='k', ls='--'); df = df.drop(columns=['name']) df.corr() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mpg cylinders displacement horsepower weight acceleration year origin mpg 1.000000 -0.768159 -0.803673 -0.783845 -0.832270 0.383589 0.568716 0.555810 cylinders -0.768159 1.000000 0.953304 0.842559 0.902638 -0.449479 -0.296280 -0.554618 displacement -0.803673 0.953304 1.000000 0.884850 0.946904 -0.475429 -0.315380 -0.612197 horsepower -0.783845 0.842559 0.884850 1.000000 0.880128 -0.641154 -0.370743 -0.448932 weight -0.832270 0.902638 0.946904 0.880128 1.000000 -0.381225 -0.297841 -0.578263 acceleration 0.383589 -0.449479 -0.475429 -0.641154 -0.381225 1.000000 0.205426 0.179090 year 0.568716 -0.296280 -0.315380 -0.370743 -0.297841 0.205426 1.000000 0.160888 origin 0.555810 -0.554618 -0.612197 -0.448932 -0.578263 0.179090 0.160888 1.000000 X = MS(df.drop(columns=['mpg'])).fit_transform(df) model = sm.OLS(df['mpg'], X) result2 = model.fit() summarize(result2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } coef std err t P>|t| intercept -19.7169 4.963 -3.973 0.000 cylinders -0.4081 0.349 -1.170 0.243 displacement 0.0168 0.009 1.963 0.050 horsepower -0.0174 0.015 -1.159 0.247 weight -0.0063 0.001 -8.213 0.000 acceleration 0.1110 0.105 1.059 0.290 year 0.7734 0.054 14.294 0.000 origin 1.3909 0.285 4.886 0.000 anova_lm(result, result2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } df_resid ssr df_diff ss_diff F Pr(>F) 0 370.0 8778.242950 0.0 NaN NaN NaN 1 364.0 4119.951551 6.0 4658.291399 68.593771 7.767048e-57 ax = plt.subplots(figsize=(8,8))[1] ax.scatter(result2.fittedvalues, result2.resid) ax.set_xlabel('Fitted value') ax.set_ylabel('Residual') ax.axhline(0, c='k', ls='--'); vals = [VIF(X, i) for i in range(1, X.shape[1])] vif = pd.DataFrame({'vif':vals}, index=X.columns[1:]) vif .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } vif cylinders 11.149785 displacement 23.969825 horsepower 9.578183 weight 14.029209 acceleration 2.414266 year 1.177402 origin 1.745033 infl = result2.get_influence () ax = plt.subplots(figsize =(8 ,8))[1] ax.scatter(np.arange(X.shape [0]), infl.hat_matrix_diag) ax.set_xlabel('Index ') ax.set_ylabel('Leverage ') np.argmax(infl.hat_matrix_diag) 8 df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mpg cylinders displacement horsepower weight acceleration year origin count 372.000000 372.000000 372.000000 372.000000 372.000000 372.000000 372.000000 372.000000 mean 23.760215 5.384409 188.114247 102.037634 2956.629032 15.738441 76.301075 1.594086 std 7.833502 1.672699 99.994614 36.079109 850.155868 2.590570 3.502898 0.810489 min 9.000000 3.000000 68.000000 46.000000 1613.000000 9.500000 70.000000 1.000000 25% 17.600000 4.000000 100.250000 75.000000 2219.750000 14.000000 73.000000 1.000000 50% 23.000000 4.000000 141.000000 91.500000 2750.000000 15.500000 76.000000 1.000000 75% 29.575000 6.000000 258.000000 115.250000 3581.750000 17.300000 79.000000 2.000000 max 46.600000 8.000000 455.000000 230.000000 5140.000000 24.800000 82.000000 3.000000 result2.rsquared 0.8190301157401636 result.rsquared 0.6144135213369303","title":"Untitled"},{"location":"applied4_13/","text":"from ISLP import load_data weekly = load_data(\"Weekly\") weekly.info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 1089 entries, 0 to 1088 Data columns (total 9 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Year 1089 non-null int64 1 Lag1 1089 non-null float64 2 Lag2 1089 non-null float64 3 Lag3 1089 non-null float64 4 Lag4 1089 non-null float64 5 Lag5 1089 non-null float64 6 Volume 1089 non-null float64 7 Today 1089 non-null float64 8 Direction 1089 non-null category dtypes: category(1), float64(7), int64(1) memory usage: 69.4 KB weekly.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Lag1 Lag2 Lag3 Lag4 Lag5 Volume Today count 1089.000000 1089.000000 1089.000000 1089.000000 1089.000000 1089.000000 1089.000000 1089.000000 mean 2000.048669 0.150585 0.151079 0.147205 0.145818 0.139893 1.574618 0.149899 std 6.033182 2.357013 2.357254 2.360502 2.360279 2.361285 1.686636 2.356927 min 1990.000000 -18.195000 -18.195000 -18.195000 -18.195000 -18.195000 0.087465 -18.195000 25% 1995.000000 -1.154000 -1.154000 -1.158000 -1.158000 -1.166000 0.332022 -1.154000 50% 2000.000000 0.241000 0.241000 0.241000 0.238000 0.234000 1.002680 0.241000 75% 2005.000000 1.405000 1.409000 1.409000 1.409000 1.405000 2.053727 1.405000 max 2010.000000 12.026000 12.026000 12.026000 12.026000 12.026000 9.328214 12.026000 import seaborn as sns sns.pairplot(weekly, hue=\"Direction\") <seaborn.axisgrid.PairGrid at 0x7224845a0d40> weekly_x = weekly.drop(columns=[\"Direction\", \"Year\", \"Today\"]) weekly_y = weekly[\"Direction\"] weekly_x.corr() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Lag1 Lag2 Lag3 Lag4 Lag5 Volume Lag1 1.000000 -0.074853 0.058636 -0.071274 -0.008183 -0.064951 Lag2 -0.074853 1.000000 -0.075721 0.058382 -0.072499 -0.085513 Lag3 0.058636 -0.075721 1.000000 -0.075396 0.060657 -0.069288 Lag4 -0.071274 0.058382 -0.075396 1.000000 -0.075675 -0.061075 Lag5 -0.008183 -0.072499 0.060657 -0.075675 1.000000 -0.058517 Volume -0.064951 -0.085513 -0.069288 -0.061075 -0.058517 1.000000 from sklearn.linear_model import LogisticRegression from ISLP import confusion_table lr = LogisticRegression(C=10e10, solver='liblinear') lr.fit(weekly_x, weekly_y) #sk-container-id-2 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-2 { color: var(--sklearn-color-text); } #sk-container-id-2 pre { padding: 0; } #sk-container-id-2 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-2 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-2 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-2 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-2 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-2 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-2 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-2 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-2 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-2 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-2 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-2 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-2 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-2 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-2 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-2 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-2 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-2 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-2 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-2 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-2 div.sk-label label.sk-toggleable__label, #sk-container-id-2 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-2 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-2 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-2 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-2 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-2 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-2 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-2 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-2 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-2 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-2 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-2 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LogisticRegression(C=100000000000.0, solver='liblinear') In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LogisticRegression ? Documentation for LogisticRegression i Fitted LogisticRegression(C=100000000000.0, solver='liblinear') lr.coef_ array([[-0.04126692, 0.05843996, -0.01606072, -0.02778961, -0.01447045, -0.02274015]]) lr_pred = lr.predict(weekly_x) confusion_table(lr_pred, weekly_y) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth Down Up Predicted Down 54 48 Up 430 557 (lr_pred == weekly_y).mean() 0.5610651974288338 train = weekly[\"Year\"] <= 2008 X_train = (weekly[[\"Lag2\"]])[train] y_train = (weekly[\"Direction\"])[train] X_test = (weekly[[\"Lag2\"]])[~train] y_test = (weekly[\"Direction\"])[~train] lr = LogisticRegression(C=10e10, solver='liblinear') lr.fit(X_train, y_train) lr_pred = lr.predict(X_test) confusion_table(lr_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth Down Up Predicted Down 9 5 Up 34 56 from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis from sklearn.neighbors import KNeighborsClassifier from sklearn.naive_bayes import GaussianNB lda = LinearDiscriminantAnalysis() lda.fit(X_train, y_train) lda_pred = lda.predict(X_test) confusion_table(lda_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth Down Up Predicted Down 9 5 Up 34 56 qda = QuadraticDiscriminantAnalysis() qda.fit(X_train, y_train) qda_pred = qda.predict(X_test) confusion_table(qda_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth Down Up Predicted Down 0 0 Up 43 61 nb = GaussianNB() nb.fit(X_train, y_train) nb_pred = nb.predict(X_test) confusion_table(nb_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth Down Up Predicted Down 0 0 Up 43 61 for i in range(1, 10): print(i) knn = KNeighborsClassifier(n_neighbors=i) knn.fit(X_train, y_train) knn_pred = knn.predict(X_test) print(confusion_table(knn_pred, y_test)) print() 1 Truth Down Up Predicted Down 22 32 Up 21 29 2 Truth Down Up Predicted Down 31 44 Up 12 17 3 Truth Down Up Predicted Down 16 19 Up 27 42 4 Truth Down Up Predicted Down 26 27 Up 17 34 5 Truth Down Up Predicted Down 16 21 Up 27 40 6 Truth Down Up Predicted Down 20 28 Up 23 33 7 Truth Down Up Predicted Down 16 20 Up 27 41 8 Truth Down Up Predicted Down 21 25 Up 22 36 9 Truth Down Up Predicted Down 17 20 Up 26 41 weekly[[\"Today\", \"Direction\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Today Direction 0 -0.270 Down 1 -2.576 Down 2 3.514 Up 3 0.712 Up 4 1.178 Up ... ... ... 1084 2.969 Up 1085 1.281 Up 1086 0.283 Up 1087 1.034 Up 1088 0.069 Up 1089 rows \u00d7 2 columns","title":"Applied4 13"},{"location":"applied4_14/","text":"import pandas as pd import numpy as np import seaborn as sns from ISLP import load_data, confusion_table from sklearn.linear_model import LogisticRegression from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA, QuadraticDiscriminantAnalysis as QDA from sklearn.naive_bayes import GaussianNB from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler auto = load_data(\"Auto\") auto = auto.reset_index() auto .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name mpg cylinders displacement horsepower weight acceleration year origin 0 chevrolet chevelle malibu 18.0 8 307.0 130 3504 12.0 70 1 1 buick skylark 320 15.0 8 350.0 165 3693 11.5 70 1 2 plymouth satellite 18.0 8 318.0 150 3436 11.0 70 1 3 amc rebel sst 16.0 8 304.0 150 3433 12.0 70 1 4 ford torino 17.0 8 302.0 140 3449 10.5 70 1 ... ... ... ... ... ... ... ... ... ... 387 ford mustang gl 27.0 4 140.0 86 2790 15.6 82 1 388 vw pickup 44.0 4 97.0 52 2130 24.6 82 2 389 dodge rampage 32.0 4 135.0 84 2295 11.6 82 1 390 ford ranger 28.0 4 120.0 79 2625 18.6 82 1 391 chevy s-10 31.0 4 119.0 82 2720 19.4 82 1 392 rows \u00d7 9 columns auto['mpg01'] = np.where(auto['mpg'] > auto['mpg'].median(), 1, 0) sns.pairplot(auto, hue='mpg01') <seaborn.axisgrid.PairGrid at 0x73ee4c894f50> useful_features = [ 'displacement', 'weight'] scaler = StandardScaler() scaler.fit(auto[useful_features]) X = scaler.transform(auto[useful_features]) X_train, X_test, y_train, y_test = train_test_split(X, auto['mpg01'], stratify=auto['mpg01'], random_state=42) # X_train, X_test, y_train, y_test = train_test_split(auto[useful_features], auto['mpg01']) lda = LDA() lda.fit(X_train, y_train) lda_pred = lda.predict(X_test) confusion_table(lda_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth 0 1 Predicted 0 42 1 1 7 48 qda = QDA() qda.fit(X_train, y_train) qda_pred = qda.predict(X_test) confusion_table(qda_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth 0 1 Predicted 0 45 1 1 4 48 lr = LogisticRegression(C=10e5) lr.fit(X_train, y_train) lr_pred = lr.predict(X_test) confusion_table(lr_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth 0 1 Predicted 0 44 3 1 5 46 nb = GaussianNB() nb.fit(X_train, y_train) nb_pred = nb.predict(X_test) confusion_table(nb_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth 0 1 Predicted 0 43 2 1 6 47 for i in range(1, 2): print(i) knn = KNeighborsClassifier(n_neighbors=i) knn.fit(X_train, y_train) knn_pred = knn.predict(X_test) print(confusion_table(knn_pred, y_test)) print() 1 Truth 0 1 Predicted 0 43 12 1 6 37 print(\"LDA\", (lda_pred == y_test).mean()) print(\"QDA\", (qda_pred == y_test).mean()) print(\"NB\", (nb_pred == y_test).mean()) print(\"LR\", (lr_pred == y_test).mean()) LDA 0.9183673469387755 QDA 0.9489795918367347 NB 0.9183673469387755 LR 0.9183673469387755","title":"Applied4 14"},{"location":"applied4_14_CV/","text":"import pandas as pd import numpy as np import seaborn as sns from ISLP import load_data, confusion_table from sklearn.linear_model import LogisticRegression, LogisticRegressionCV from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA, QuadraticDiscriminantAnalysis as QDA from sklearn.naive_bayes import GaussianNB from sklearn.neighbors import KNeighborsClassifier from sklearn.model_selection import train_test_split, KFold from sklearn.preprocessing import StandardScaler, PolynomialFeatures from sklearn.pipeline import make_pipeline auto = load_data(\"Auto\") auto = auto.reset_index() auto .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name mpg cylinders displacement horsepower weight acceleration year origin 0 chevrolet chevelle malibu 18.0 8 307.0 130 3504 12.0 70 1 1 buick skylark 320 15.0 8 350.0 165 3693 11.5 70 1 2 plymouth satellite 18.0 8 318.0 150 3436 11.0 70 1 3 amc rebel sst 16.0 8 304.0 150 3433 12.0 70 1 4 ford torino 17.0 8 302.0 140 3449 10.5 70 1 ... ... ... ... ... ... ... ... ... ... 387 ford mustang gl 27.0 4 140.0 86 2790 15.6 82 1 388 vw pickup 44.0 4 97.0 52 2130 24.6 82 2 389 dodge rampage 32.0 4 135.0 84 2295 11.6 82 1 390 ford ranger 28.0 4 120.0 79 2625 18.6 82 1 391 chevy s-10 31.0 4 119.0 82 2720 19.4 82 1 392 rows \u00d7 9 columns auto['mpg01'] = np.where(auto['mpg'] > auto['mpg'].median(), 1, 0) sns.pairplot(auto, hue='mpg01') <seaborn.axisgrid.PairGrid at 0x796b727da720> features = ['displacement'] X = auto[features] y = auto[\"mpg01\"] kf = KFold(n_splits=10, shuffle=True, random_state=1) # scaler = StandardScaler() # scaler.fit(auto[useful_features]) # X = scaler.transform(auto[useful_features]) for i in range(1, 10): s = [] for train_index, test_index in kf.split(X): X_train, y_train = X.loc[train_index], y.loc[train_index] X_test, y_test = X.loc[test_index], y.loc[test_index] model = make_pipeline( PolynomialFeatures(degree=i, include_bias=False), LogisticRegression(C=1) ) model.fit(X_train, y_train) s.append((model.predict(X_test) == y_test).mean()) print(i, (np.array(s)).mean()) 1 0.8900641025641025 2 0.8900641025641025 3 0.8951923076923076 4 0.9028846153846155 5 0.8876282051282051 6 0.7150641025641026 7 0.49967948717948724 8 0.49967948717948724 9 0.49967948717948724 LogisticRegressionCV? \u001b[0;31mInit signature:\u001b[0m \u001b[0mLogisticRegressionCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mCs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mfit_intercept\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mdual\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mpenalty\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'l2'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0msolver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'lbfgs'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mtol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.0001\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mrefit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mintercept_scaling\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mmulti_class\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'deprecated'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m \u001b[0ml1_ratios\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m \u001b[0;31mDocstring:\u001b[0m Logistic Regression CV (aka logit, MaxEnt) classifier. See glossary entry for :term:`cross-validation estimator`. This class implements logistic regression using liblinear, newton-cg, sag or lbfgs optimizer. The newton-cg, sag and lbfgs solvers support only L2 regularization with primal formulation. The liblinear solver supports both L1 and L2 regularization, with a dual formulation only for the L2 penalty. Elastic-Net penalty is only supported by the saga solver. For the grid of `Cs` values and `l1_ratios` values, the best hyperparameter is selected by the cross-validator :class:`~sklearn.model_selection.StratifiedKFold`, but it can be changed using the :term:`cv` parameter. The 'newton-cg', 'sag', 'saga' and 'lbfgs' solvers can warm-start the coefficients (see :term:`Glossary<warm_start>`). Read more in the :ref:`User Guide <logistic_regression>`. Parameters ---------- Cs : int or list of floats, default=10 Each of the values in Cs describes the inverse of regularization strength. If Cs is as an int, then a grid of Cs values are chosen in a logarithmic scale between 1e-4 and 1e4. Like in support vector machines, smaller values specify stronger regularization. fit_intercept : bool, default=True Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function. cv : int or cross-validation generator, default=None The default cross-validation generator used is Stratified K-Folds. If an integer is provided, then it is the number of folds used. See the module :mod:`sklearn.model_selection` module for the list of possible cross-validation objects. .. versionchanged:: 0.22 ``cv`` default value if None changed from 3-fold to 5-fold. dual : bool, default=False Dual (constrained) or primal (regularized, see also :ref:`this equation <regularized-logistic-loss>`) formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features. penalty : {'l1', 'l2', 'elasticnet'}, default='l2' Specify the norm of the penalty: - `'l2'`: add a L2 penalty term (used by default); - `'l1'`: add a L1 penalty term; - `'elasticnet'`: both L1 and L2 penalty terms are added. .. warning:: Some penalties may not work with some solvers. See the parameter `solver` below, to know the compatibility between the penalty and solver. scoring : str or callable, default=None A string (see :ref:`scoring_parameter`) or a scorer callable object / function with signature ``scorer(estimator, X, y)``. For a list of scoring functions that can be used, look at :mod:`sklearn.metrics`. The default scoring option used is 'accuracy'. solver : {'lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'}, default='lbfgs' Algorithm to use in the optimization problem. Default is 'lbfgs'. To choose a solver, you might want to consider the following aspects: - For small datasets, 'liblinear' is a good choice, whereas 'sag' and 'saga' are faster for large ones; - For multiclass problems, all solvers except 'liblinear' minimize the full multinomial loss; - 'liblinear' might be slower in :class:`LogisticRegressionCV` because it does not handle warm-starting. - 'liblinear' can only handle binary classification by default. To apply a one-versus-rest scheme for the multiclass setting one can wrap it with the :class:`~sklearn.multiclass.OneVsRestClassifier`. - 'newton-cholesky' is a good choice for `n_samples` >> `n_features * n_classes`, especially with one-hot encoded categorical features with rare categories. Be aware that the memory usage of this solver has a quadratic dependency on `n_features * n_classes` because it explicitly computes the full Hessian matrix. .. warning:: The choice of the algorithm depends on the penalty chosen and on (multinomial) multiclass support: ================= ============================== ====================== solver penalty multinomial multiclass ================= ============================== ====================== 'lbfgs' 'l2' yes 'liblinear' 'l1', 'l2' no 'newton-cg' 'l2' yes 'newton-cholesky' 'l2', no 'sag' 'l2', yes 'saga' 'elasticnet', 'l1', 'l2' yes ================= ============================== ====================== .. note:: 'sag' and 'saga' fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from :mod:`sklearn.preprocessing`. .. versionadded:: 0.17 Stochastic Average Gradient descent solver. .. versionadded:: 0.19 SAGA solver. .. versionadded:: 1.2 newton-cholesky solver. tol : float, default=1e-4 Tolerance for stopping criteria. max_iter : int, default=100 Maximum number of iterations of the optimization algorithm. class_weight : dict or 'balanced', default=None Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``. Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified. .. versionadded:: 0.17 class_weight == 'balanced' n_jobs : int, default=None Number of CPU cores used during the cross-validation loop. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details. verbose : int, default=0 For the 'liblinear', 'sag' and 'lbfgs' solvers set verbose to any positive number for verbosity. refit : bool, default=True If set to True, the scores are averaged across all folds, and the coefs and the C that corresponds to the best score is taken, and a final refit is done using these parameters. Otherwise the coefs, intercepts and C that correspond to the best scores across folds are averaged. intercept_scaling : float, default=1 Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``. Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased. multi_class : {'auto, 'ovr', 'multinomial'}, default='auto' If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'. .. versionadded:: 0.18 Stochastic Average Gradient descent solver for 'multinomial' case. .. versionchanged:: 0.22 Default changed from 'ovr' to 'auto' in 0.22. .. deprecated:: 1.5 ``multi_class`` was deprecated in version 1.5 and will be removed in 1.7. From then on, the recommended 'multinomial' will always be used for `n_classes >= 3`. Solvers that do not support 'multinomial' will raise an error. Use `sklearn.multiclass.OneVsRestClassifier(LogisticRegressionCV())` if you still want to use OvR. random_state : int, RandomState instance, default=None Used when `solver='sag'`, 'saga' or 'liblinear' to shuffle the data. Note that this only applies to the solver and not the cross-validation generator. See :term:`Glossary <random_state>` for details. l1_ratios : list of float, default=None The list of Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``. Only used if ``penalty='elasticnet'``. A value of 0 is equivalent to using ``penalty='l2'``, while 1 is equivalent to using ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a combination of L1 and L2. Attributes ---------- classes_ : ndarray of shape (n_classes, ) A list of class labels known to the classifier. coef_ : ndarray of shape (1, n_features) or (n_classes, n_features) Coefficient of the features in the decision function. `coef_` is of shape (1, n_features) when the given problem is binary. intercept_ : ndarray of shape (1,) or (n_classes,) Intercept (a.k.a. bias) added to the decision function. If `fit_intercept` is set to False, the intercept is set to zero. `intercept_` is of shape(1,) when the problem is binary. Cs_ : ndarray of shape (n_cs) Array of C i.e. inverse of regularization parameter values used for cross-validation. l1_ratios_ : ndarray of shape (n_l1_ratios) Array of l1_ratios used for cross-validation. If no l1_ratio is used (i.e. penalty is not 'elasticnet'), this is set to ``[None]`` coefs_paths_ : ndarray of shape (n_folds, n_cs, n_features) or (n_folds, n_cs, n_features + 1) dict with classes as the keys, and the path of coefficients obtained during cross-validating across each fold and then across each Cs after doing an OvR for the corresponding class as values. If the 'multi_class' option is set to 'multinomial', then the coefs_paths are the coefficients corresponding to each class. Each dict value has shape ``(n_folds, n_cs, n_features)`` or ``(n_folds, n_cs, n_features + 1)`` depending on whether the intercept is fit or not. If ``penalty='elasticnet'``, the shape is ``(n_folds, n_cs, n_l1_ratios_, n_features)`` or ``(n_folds, n_cs, n_l1_ratios_, n_features + 1)``. scores_ : dict dict with classes as the keys, and the values as the grid of scores obtained during cross-validating each fold, after doing an OvR for the corresponding class. If the 'multi_class' option given is 'multinomial' then the same scores are repeated across all classes, since this is the multinomial class. Each dict value has shape ``(n_folds, n_cs)`` or ``(n_folds, n_cs, n_l1_ratios)`` if ``penalty='elasticnet'``. C_ : ndarray of shape (n_classes,) or (n_classes - 1,) Array of C that maps to the best scores across every class. If refit is set to False, then for each class, the best C is the average of the C's that correspond to the best scores for each fold. `C_` is of shape(n_classes,) when the problem is binary. l1_ratio_ : ndarray of shape (n_classes,) or (n_classes - 1,) Array of l1_ratio that maps to the best scores across every class. If refit is set to False, then for each class, the best l1_ratio is the average of the l1_ratio's that correspond to the best scores for each fold. `l1_ratio_` is of shape(n_classes,) when the problem is binary. n_iter_ : ndarray of shape (n_classes, n_folds, n_cs) or (1, n_folds, n_cs) Actual number of iterations for all classes, folds and Cs. In the binary or multinomial cases, the first dimension is equal to 1. If ``penalty='elasticnet'``, the shape is ``(n_classes, n_folds, n_cs, n_l1_ratios)`` or ``(1, n_folds, n_cs, n_l1_ratios)``. n_features_in_ : int Number of features seen during :term:`fit`. .. versionadded:: 0.24 feature_names_in_ : ndarray of shape (`n_features_in_`,) Names of features seen during :term:`fit`. Defined only when `X` has feature names that are all strings. .. versionadded:: 1.0 See Also -------- LogisticRegression : Logistic regression without tuning the hyperparameter `C`. Examples -------- >>> from sklearn.datasets import load_iris >>> from sklearn.linear_model import LogisticRegressionCV >>> X, y = load_iris(return_X_y=True) >>> clf = LogisticRegressionCV(cv=5, random_state=0).fit(X, y) >>> clf.predict(X[:2, :]) array([0, 0]) >>> clf.predict_proba(X[:2, :]).shape (2, 3) >>> clf.score(X, y) 0.98... \u001b[0;31mFile:\u001b[0m ~/Lab/islp/venv/lib/python3.12/site-packages/sklearn/linear_model/_logistic.py \u001b[0;31mType:\u001b[0m type \u001b[0;31mSubclasses:\u001b[0m","title":"applied4 14 CV"},{"location":"applied6_9/","text":"import numpy as np import pandas as pd from matplotlib.pyplot import subplots import sklearn.linear_model as skl import sklearn.model_selection as skm import seaborn as sns from sklearn.metrics import r2_score as R2, mean_squared_error as MSE from sklearn.preprocessing import StandardScaler from sklearn.cross_decomposition import PLSRegression from sklearn.decomposition import PCA from sklearn.pipeline import Pipeline from ISLP import load_data college = load_data('College') college.info() college <class 'pandas.core.frame.DataFrame'> RangeIndex: 777 entries, 0 to 776 Data columns (total 18 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Private 777 non-null category 1 Apps 777 non-null int64 2 Accept 777 non-null int64 3 Enroll 777 non-null int64 4 Top10perc 777 non-null int64 5 Top25perc 777 non-null int64 6 F.Undergrad 777 non-null int64 7 P.Undergrad 777 non-null int64 8 Outstate 777 non-null int64 9 Room.Board 777 non-null int64 10 Books 777 non-null int64 11 Personal 777 non-null int64 12 PhD 777 non-null int64 13 Terminal 777 non-null int64 14 S.F.Ratio 777 non-null float64 15 perc.alumni 777 non-null int64 16 Expend 777 non-null int64 17 Grad.Rate 777 non-null int64 dtypes: category(1), float64(1), int64(16) memory usage: 104.2 KB .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Private Apps Accept Enroll Top10perc Top25perc F.Undergrad P.Undergrad Outstate Room.Board Books Personal PhD Terminal S.F.Ratio perc.alumni Expend Grad.Rate 0 Yes 1660 1232 721 23 52 2885 537 7440 3300 450 2200 70 78 18.1 12 7041 60 1 Yes 2186 1924 512 16 29 2683 1227 12280 6450 750 1500 29 30 12.2 16 10527 56 2 Yes 1428 1097 336 22 50 1036 99 11250 3750 400 1165 53 66 12.9 30 8735 54 3 Yes 417 349 137 60 89 510 63 12960 5450 450 875 92 97 7.7 37 19016 59 4 Yes 193 146 55 16 44 249 869 7560 4120 800 1500 76 72 11.9 2 10922 15 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 772 No 2197 1515 543 4 26 3089 2029 6797 3900 500 1200 60 60 21.0 14 4469 40 773 Yes 1959 1805 695 24 47 2849 1107 11520 4960 600 1250 73 75 13.3 31 9189 83 774 Yes 2097 1915 695 34 61 2793 166 6900 4200 617 781 67 75 14.4 20 8323 49 775 Yes 10705 2453 1317 95 99 5217 83 19840 6510 630 2115 96 96 5.8 49 40386 99 776 Yes 2989 1855 691 28 63 2988 1726 4990 3560 500 1250 75 75 18.1 28 4509 99 777 rows \u00d7 18 columns college.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Apps Accept Enroll Top10perc Top25perc F.Undergrad P.Undergrad Outstate Room.Board Books Personal PhD Terminal S.F.Ratio perc.alumni Expend Grad.Rate count 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.000000 777.00000 mean 3001.638353 2018.804376 779.972973 27.558559 55.796654 3699.907336 855.298584 10440.669241 4357.526384 549.380952 1340.642214 72.660232 79.702703 14.089704 22.743887 9660.171171 65.46332 std 3870.201484 2451.113971 929.176190 17.640364 19.804778 4850.420531 1522.431887 4023.016484 1096.696416 165.105360 677.071454 16.328155 14.722359 3.958349 12.391801 5221.768440 17.17771 min 81.000000 72.000000 35.000000 1.000000 9.000000 139.000000 1.000000 2340.000000 1780.000000 96.000000 250.000000 8.000000 24.000000 2.500000 0.000000 3186.000000 10.00000 25% 776.000000 604.000000 242.000000 15.000000 41.000000 992.000000 95.000000 7320.000000 3597.000000 470.000000 850.000000 62.000000 71.000000 11.500000 13.000000 6751.000000 53.00000 50% 1558.000000 1110.000000 434.000000 23.000000 54.000000 1707.000000 353.000000 9990.000000 4200.000000 500.000000 1200.000000 75.000000 82.000000 13.600000 21.000000 8377.000000 65.00000 75% 3624.000000 2424.000000 902.000000 35.000000 69.000000 4005.000000 967.000000 12925.000000 5050.000000 600.000000 1700.000000 85.000000 92.000000 16.500000 31.000000 10830.000000 78.00000 max 48094.000000 26330.000000 6392.000000 96.000000 100.000000 31643.000000 21836.000000 21700.000000 8124.000000 2340.000000 6800.000000 103.000000 100.000000 39.800000 64.000000 56233.000000 118.00000 college[\"Private\"] = [1 if p == \"Yes\" else 0 for p in college[\"Private\"]] sns.heatmap(college.corr()) <Axes: > X = college.drop(columns=['Apps']) y = college['Apps'] X_train, X_test, y_train, y_test = skm.train_test_split(X, y, shuffle=True, random_state=0) scaler = StandardScaler() scaler.fit(X_train) X_train = scaler.transform(X_train) X_test = scaler.transform(X_test) lambdas = 10**np.linspace(8, -4) lr = skl.LinearRegression() lr.fit(X_train, y_train) lr_pred = lr.predict(X_test) ridge = skl.RidgeCV(alphas=lambdas) ridge.fit(X_train, y_train) ridge_pred = ridge.predict(X_test) lasso = skl.LassoCV(alphas=lambdas) lasso.fit(X_train, y_train) lasso_pred = lasso.predict(X_test) pcr = Pipeline([ ('pca', PCA()), ('plr', skl.LinearRegression()) ]) param = {'pca__n_components': range(1, X_train.shape[1])} pcr = skm.GridSearchCV(pcr, param_grid=param, scoring='r2') pcr.fit(X_train, y_train) pcr_pred = pcr.predict(X_test) pls = PLSRegression() param = {'n_components': range(1, X_train.shape[1])} pls = skm.GridSearchCV(pls, param_grid=param, scoring='r2') pls.fit(X_train, y_train) pls_pred = pls.predict(X_test) R2(y_test, lr_pred), R2(y_test, ridge_pred), R2(y_test, ridge_pred), R2(y_test, ridge_pred), R2(y_test, ridge_pred), (0.9002392990734523, 0.9002393892199767, 0.9002393892199767, 0.9002393892199767, 0.9002393892199767) MSE(lr_pred, y_test), MSE(ridge_pred, y_test), MSE(lasso_pred, y_test), MSE(pcr_pred, y_test), MSE(pls_pred, y_test), (1022430.0889255423, 1022429.1650294779, 1045905.0958773881, 1025469.2195196956, 1017373.0630376363) lr.coef_, ridge.coef_, lasso.coef_, pcr.best_estimator_.named_steps['plr'].coef_, pls.best_estimator_.coef_ (array([-2.51082107e+02, 4.18269191e+03, -9.96433619e+02, 1.01537623e+03, -3.44032537e+02, 3.64813902e+02, 8.83658018e+01, -3.03380710e+02, 1.91334277e+02, 2.53797453e+00, -8.05468486e+00, -1.82788586e+02, -4.51727150e+01, 1.50670386e+01, 8.14678768e+00, 2.49568955e+02, 1.43324300e+02]), array([-2.51082354e+02, 4.18268552e+03, -9.96424071e+02, 1.01537358e+03, -3.44030511e+02, 3.64810149e+02, 8.83657476e+01, -3.03379720e+02, 1.91334635e+02, 2.53800864e+00, -8.05477455e+00, -1.82788258e+02, -4.51729689e+01, 1.50671183e+01, 8.14624438e+00, 2.49569258e+02, 1.43324391e+02]), array([-177.14499451, 3615.46802497, -0. , 547.81793016, -0. , -0. , 0. , -54.17217488, 120.98445659, 0. , -0. , -75.25305854, -32.24841232, -0. , -0. , 178.90491257, 21.07618984]), array([ 384.41596737, 1610.37407754, -174.73373112, -582.86012121, 1245.63502865, -335.64403864, -390.42036453, -371.47592549, -392.95424603, -193.05636542, -136.11556742, 4.19431906, 125.97688297, 176.81414375, 2402.96762785, 2477.93764111]), array([[-2.50590747e+02, 4.13036908e+03, -6.75857579e+02, 1.10640670e+03, -4.05532175e+02, 7.73330234e+01, 1.08632225e+02, -3.31449999e+02, 1.94782720e+02, -1.10102229e+01, 1.66980506e+00, -2.19589615e+02, -1.05852444e+01, 2.03584653e+01, 2.05234569e+01, 2.45313541e+02, 1.28515658e+02]])) ridge.alpha_, lasso.alpha_, pcr.best_params_, pls.best_params_ (0.0001, 42.91934260128778, {'pca__n_components': 16}, {'n_components': 10})","title":"Applied6 9"},{"location":"demo4/","text":"import pandas as pd import numpy as np from matplotlib.pyplot import subplots import statsmodels.api as sm from ISLP import load_data from ISLP.models import (ModelSpec as MS, summarize) from ISLP import confusion_table from ISLP.models import contrast from sklearn.discriminant_analysis import \\ (LinearDiscriminantAnalysis as LDA , QuadraticDiscriminantAnalysis as QDA) from sklearn.naive_bayes import GaussianNB from sklearn.neighbors import KNeighborsClassifier from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression Smarket = load_data('Smarket') Smarket .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Lag1 Lag2 Lag3 Lag4 Lag5 Volume Today Direction 0 2001 0.381 -0.192 -2.624 -1.055 5.010 1.19130 0.959 Up 1 2001 0.959 0.381 -0.192 -2.624 -1.055 1.29650 1.032 Up 2 2001 1.032 0.959 0.381 -0.192 -2.624 1.41120 -0.623 Down 3 2001 -0.623 1.032 0.959 0.381 -0.192 1.27600 0.614 Up 4 2001 0.614 -0.623 1.032 0.959 0.381 1.20570 0.213 Up ... ... ... ... ... ... ... ... ... ... 1245 2005 0.422 0.252 -0.024 -0.584 -0.285 1.88850 0.043 Up 1246 2005 0.043 0.422 0.252 -0.024 -0.584 1.28581 -0.955 Down 1247 2005 -0.955 0.043 0.422 0.252 -0.024 1.54047 0.130 Up 1248 2005 0.130 -0.955 0.043 0.422 0.252 1.42236 -0.298 Down 1249 2005 -0.298 0.130 -0.955 0.043 0.422 1.38254 -0.489 Down 1250 rows \u00d7 9 columns Smarket.drop(columns=[\"Direction\"]).corr() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Lag1 Lag2 Lag3 Lag4 Lag5 Volume Today Year 1.000000 0.029700 0.030596 0.033195 0.035689 0.029788 0.539006 0.030095 Lag1 0.029700 1.000000 -0.026294 -0.010803 -0.002986 -0.005675 0.040910 -0.026155 Lag2 0.030596 -0.026294 1.000000 -0.025897 -0.010854 -0.003558 -0.043383 -0.010250 Lag3 0.033195 -0.010803 -0.025897 1.000000 -0.024051 -0.018808 -0.041824 -0.002448 Lag4 0.035689 -0.002986 -0.010854 -0.024051 1.000000 -0.027084 -0.048414 -0.006900 Lag5 0.029788 -0.005675 -0.003558 -0.018808 -0.027084 1.000000 -0.022002 -0.034860 Volume 0.539006 0.040910 -0.043383 -0.041824 -0.048414 -0.022002 1.000000 0.014592 Today 0.030095 -0.026155 -0.010250 -0.002448 -0.006900 -0.034860 0.014592 1.000000 Smarket.plot(y='Volume') <Axes: > allvars = Smarket.drop(columns=[\"Today\", \"Year\", \"Direction\"]) design = MS(allvars) X = design.fit_transform(Smarket) y = Smarket.Direction == \"Up\" glm = sm.GLM(y, X, family=sm.families.Binomial()) results = glm.fit() summarize(results) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } coef std err z P>|z| intercept -0.1260 0.241 -0.523 0.601 Lag1 -0.0731 0.050 -1.457 0.145 Lag2 -0.0423 0.050 -0.845 0.398 Lag3 0.0111 0.050 0.222 0.824 Lag4 0.0094 0.050 0.187 0.851 Lag5 0.0103 0.050 0.208 0.835 Volume 0.1354 0.158 0.855 0.392 probs = results.predict() probs array([0.50708413, 0.48146788, 0.48113883, ..., 0.5392683 , 0.52611829, 0.51791656]) labels = np.array([\"Up\" if n > 0.5 else \"Down\" for n in probs]) labels array(['Up', 'Down', 'Down', ..., 'Up', 'Up', 'Up'], dtype='<U4') confusion_table(labels, Smarket.Direction) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth Down Up Predicted Down 145 141 Up 457 507 train = (Smarket[\"Year\"] < 2005) Smarket_train = Smarket[train] Smarket_test = Smarket[~train] X_train, X_test = X[train], X[~train] y_train, y_test = y[train], y[~train] train_glm = sm.GLM(y_train, X_train, family=sm.families.Binomial()) results = train_glm.fit() probs = results.predict(exog=X_test) probs 998 0.528220 999 0.515669 1000 0.522652 1001 0.513854 1002 0.498334 ... 1245 0.483637 1246 0.506048 1247 0.516658 1248 0.516124 1249 0.508072 Length: 252, dtype: float64 labels = np.array([True if n > 0.5 else False for n in probs]) confusion_table(labels, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth False True Predicted False 77 97 True 34 44 X_train = (Smarket[train])[[\"Lag1\", \"Lag2\"]] y_train = (Smarket[train]).Direction == \"Up\" X_test = (Smarket[~train])[[\"Lag1\", \"Lag2\"]] y_test = (Smarket[~train]).Direction == \"Up\" lda = LDA(store_covariance=True) lda.fit(X_train, y_train) #sk-container-id-4 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-4 { color: var(--sklearn-color-text); } #sk-container-id-4 pre { padding: 0; } #sk-container-id-4 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-4 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-4 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-4 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-4 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-4 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-4 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-4 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-4 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-4 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-4 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-4 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-4 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-4 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-4 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-4 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-4 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-4 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-4 div.sk-label label.sk-toggleable__label, #sk-container-id-4 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-4 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-4 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-4 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-4 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-4 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-4 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-4 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-4 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-4 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-4 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-4 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } LinearDiscriminantAnalysis(store_covariance=True) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. LinearDiscriminantAnalysis ? Documentation for LinearDiscriminantAnalysis i Fitted LinearDiscriminantAnalysis(store_covariance=True) lda.means_, lda.priors_ (array([[ 0.04279022, 0.03389409], [-0.03954635, -0.03132544]]), array([0.49198397, 0.50801603])) lda_pred = lda.predict(X_test) confusion_table(lda_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth False True Predicted False 35 35 True 76 106 lda_prob = lda.predict_proba(X_test) 0.5202349505356155 qda = QDA(store_covariance=True) qda.fit(X_train, y_train) #sk-container-id-5 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-5 { color: var(--sklearn-color-text); } #sk-container-id-5 pre { padding: 0; } #sk-container-id-5 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-5 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-5 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-5 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-5 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-5 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-5 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-5 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-5 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-5 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-5 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-5 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-5 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-5 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-5 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-5 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-5 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-5 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-5 div.sk-label label.sk-toggleable__label, #sk-container-id-5 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-5 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-5 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-5 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-5 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-5 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-5 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-5 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-5 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-5 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-5 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-5 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } QuadraticDiscriminantAnalysis(store_covariance=True) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. QuadraticDiscriminantAnalysis ? Documentation for QuadraticDiscriminantAnalysis i Fitted QuadraticDiscriminantAnalysis(store_covariance=True) qda.means_, qda.priors_ (array([[ 0.04279022, 0.03389409], [-0.03954635, -0.03132544]]), array([0.49198397, 0.50801603])) qda.covariance_ [array([[ 1.50662277, -0.03924806], [-0.03924806, 1.53559498]]), array([[ 1.51700576, -0.02787349], [-0.02787349, 1.49026815]])] (qda.predict(X_test) == y_test).mean() 0.5992063492063492 NB = GaussianNB() NB.fit(X_train, y_train) #sk-container-id-6 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-6 { color: var(--sklearn-color-text); } #sk-container-id-6 pre { padding: 0; } #sk-container-id-6 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-6 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-6 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-6 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-6 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-6 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-6 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-6 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-6 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-6 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-6 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-6 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-6 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-6 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-6 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-6 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-6 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-6 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-6 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-6 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-6 div.sk-label label.sk-toggleable__label, #sk-container-id-6 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-6 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-6 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-6 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-6 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-6 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-6 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-6 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-6 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-6 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-6 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-6 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } GaussianNB() In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. GaussianNB ? Documentation for GaussianNB i Fitted GaussianNB() NB.theta_, NB.var_ (array([[ 0.04279022, 0.03389409], [-0.03954635, -0.03132544]]), array([[1.50355429, 1.53246749], [1.51401364, 1.48732877]])) (NB.predict(X_test) == y_test).mean() 0.5952380952380952 knn1 = KNeighborsClassifier(n_neighbors=1) knn1.fit(X_train, y_train) (knn1.predict(X_test) == y_test).mean() #sk-container-id-9 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-9 { color: var(--sklearn-color-text); } #sk-container-id-9 pre { padding: 0; } #sk-container-id-9 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-9 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-9 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-9 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-9 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-9 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-9 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-9 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-9 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-9 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-9 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-9 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-9 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-9 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-9 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-9 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-9 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-9 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-9 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-9 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-9 div.sk-label label.sk-toggleable__label, #sk-container-id-9 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-9 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-9 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-9 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-9 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-9 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-9 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-9 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-9 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-9 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-9 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-9 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } KNeighborsClassifier(n_neighbors=1) In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. KNeighborsClassifier ? Documentation for KNeighborsClassifier i Fitted KNeighborsClassifier(n_neighbors=1) knn3 = KNeighborsClassifier(n_neighbors=3) knn3.fit(X_train, y_train) (knn3.predict(X_test) == y_test).mean() 0.5317460317460317 Caravan = load_data('Caravan') Purchase = Caravan.Purchase Purchase.value_counts() Purchase No 5474 Yes 348 Name: count, dtype: int64 caravan_df = Caravan.drop(columns=[\"Purchase\"]) scaler = StandardScaler(copy=True) scaler.fit(caravan_df) X_std = scaler.transform(caravan_df) pd.DataFrame(X_std, columns=caravan_df.columns).std() MOSTYPE 1.000086 MAANTHUI 1.000086 MGEMOMV 1.000086 MGEMLEEF 1.000086 MOSHOOFD 1.000086 ... AZEILPL 1.000086 APLEZIER 1.000086 AFIETS 1.000086 AINBOED 1.000086 ABYSTAND 1.000086 Length: 85, dtype: float64 (X_train, X_test, y_train, y_test) = train_test_split(caravan_df, Purchase, test_size=1000, random_state=0) knn1 = KNeighborsClassifier(n_neighbors=1) knn1.fit(X_train, y_train) (knn1.predict(X_test) == y_test).mean() 0.879 knn3 = KNeighborsClassifier(n_neighbors=3) knn3.fit(X_train, y_train) (knn3.predict(X_test) == y_test).mean() 0.923 confusion_table(knn1.predict(X_test), y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth No Yes Predicted No 874 62 Yes 59 5 logit = LogisticRegression(C=1e10, solver='liblinear') logit.fit(X_train, y_train) logit_pred = logit.predict(X_test) confusion_table(logit_pred, y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth No Yes Predicted No 931 67 Yes 2 0 logit = LogisticRegression(C=1e10 , solver='liblinear') logit.fit(X_train , y_train) logit_pred = logit.predict_proba(X_test) logit_labels = np.where(logit_pred [:,1] > 0.15, 'Yes', 'No') confusion_table(logit_labels , y_test) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Truth No Yes Predicted No 876 49 Yes 57 18","title":"Demo4"},{"location":"demo6/","text":"import pandas as pd import numpy as np import seaborn as sns import sklearn.linear_model as skl import sklearn.model_selection as skm from ISLP import load_data from sklearn.preprocessing import StandardScaler from sklearn.pipeline import Pipeline from matplotlib.pyplot import subplots hits = load_data('Hitters') hits.info() hits.head() <class 'pandas.core.frame.DataFrame'> RangeIndex: 322 entries, 0 to 321 Data columns (total 20 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 AtBat 322 non-null int64 1 Hits 322 non-null int64 2 HmRun 322 non-null int64 3 Runs 322 non-null int64 4 RBI 322 non-null int64 5 Walks 322 non-null int64 6 Years 322 non-null int64 7 CAtBat 322 non-null int64 8 CHits 322 non-null int64 9 CHmRun 322 non-null int64 10 CRuns 322 non-null int64 11 CRBI 322 non-null int64 12 CWalks 322 non-null int64 13 League 322 non-null category 14 Division 322 non-null category 15 PutOuts 322 non-null int64 16 Assists 322 non-null int64 17 Errors 322 non-null int64 18 Salary 263 non-null float64 19 NewLeague 322 non-null category dtypes: category(3), float64(1), int64(16) memory usage: 44.2 KB .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI CWalks League Division PutOuts Assists Errors Salary NewLeague 0 293 66 1 30 29 14 1 293 66 1 30 29 14 A E 446 33 20 NaN A 1 315 81 7 24 38 39 14 3449 835 69 321 414 375 N W 632 43 10 475.0 N 2 479 130 18 66 72 76 3 1624 457 63 224 266 263 A W 880 82 14 480.0 A 3 496 141 20 65 78 37 11 5628 1575 225 828 838 354 N E 200 11 3 500.0 N 4 321 87 10 39 42 30 2 396 101 12 48 46 33 N E 805 40 4 91.5 N hits.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI CWalks PutOuts Assists Errors Salary count 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.00000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 263.000000 mean 380.928571 101.024845 10.770186 50.909938 48.027950 38.742236 7.444099 2648.68323 717.571429 69.490683 358.795031 330.118012 260.239130 288.937888 106.913043 8.040373 535.925882 std 153.404981 46.454741 8.709037 26.024095 26.166895 21.639327 4.926087 2324.20587 654.472627 86.266061 334.105886 333.219617 267.058085 280.704614 136.854876 6.368359 451.118681 min 16.000000 1.000000 0.000000 0.000000 0.000000 0.000000 1.000000 19.00000 4.000000 0.000000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 67.500000 25% 255.250000 64.000000 4.000000 30.250000 28.000000 22.000000 4.000000 816.75000 209.000000 14.000000 100.250000 88.750000 67.250000 109.250000 7.000000 3.000000 190.000000 50% 379.500000 96.000000 8.000000 48.000000 44.000000 35.000000 6.000000 1928.00000 508.000000 37.500000 247.000000 220.500000 170.500000 212.000000 39.500000 6.000000 425.000000 75% 512.000000 137.000000 16.000000 69.000000 64.750000 53.000000 11.000000 3924.25000 1059.250000 90.000000 526.250000 426.250000 339.250000 325.000000 166.000000 11.000000 750.000000 max 687.000000 238.000000 40.000000 130.000000 121.000000 105.000000 24.000000 14053.00000 4256.000000 548.000000 2165.000000 1659.000000 1566.000000 1378.000000 492.000000 32.000000 2460.000000 hits = hits.dropna() sns.pairplot(hits, hue=\"Salary\") <seaborn.axisgrid.PairGrid at 0x7cfb80e084a0> kfold = skm.KFold(n_splits=5, shuffle=True, random_state=0) X = hits.drop(columns=[\"Salary\", \"League\", \"Division\", \"NewLeague\"]) y = hits[\"Salary\"] lr = LinearRegression() models = [] best_preds = [] best_mse = [] for _ in range(len(X.columns)): mse_col = [] mse_col_name = [] for col in X.columns: if col in best_preds: continue tmp_mse = [] for (train_id, test_id) in kfold.split(y): X_train, y_train = X[[col] + best_preds].iloc[train_id], y.iloc[train_id] X_test, y_test = X[[col] + best_preds].iloc[test_id], y.iloc[test_id] lr.fit(X_train, y_train) lr_pred = lr.predict(X_test) mse = ((lr_pred - y_test)**2).mean() tmp_mse.append(mse) mse_col.append(np.mean(tmp_mse)) mse_col_name.append(col) best_col_id = np.argmin(mse_col) best_preds.append(mse_col_name[best_col_id]) best_mse.append(mse_col[best_col_id]) best_preds ['CRBI', 'Hits', 'PutOuts', 'AtBat', 'Walks', 'CWalks', 'CRuns', 'CHmRun', 'RBI', 'Errors', 'CHits', 'Assists', 'HmRun', 'Runs', 'Years', 'CAtBat'] best_n = np.argmin(best_mse) best_n_preds = best_preds[:best_n+1] X_train, X_test, y_train, y_test = skm.train_test_split(X[best_n_preds], y) lr = LinearRegression() lr.fit(X_train, y_train) lr_pred = lr.predict(X_test) ((lr_pred - y_test)**2).mean() 107105.26189115838 fig, ax = subplots() ax.scatter(y_test, lr_pred - y_test) ax.set_xlabel(\"Salary\") ax.set_ylabel(\"Salary error\") Text(0, 0.5, 'Salary error')","title":"Demo6"},{"location":"demo6_2/","text":"import pandas as pd import numpy as np import seaborn as sns import sklearn.linear_model as skl import sklearn.model_selection as skm from ISLP import load_data from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.pipeline import Pipeline, make_pipeline from sklearn.metrics import mean_squared_error as MSE, r2_score as R2 from matplotlib.pyplot import subplots hits = load_data('Hitters') hits.info() hits.head() <class 'pandas.core.frame.DataFrame'> RangeIndex: 322 entries, 0 to 321 Data columns (total 20 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 AtBat 322 non-null int64 1 Hits 322 non-null int64 2 HmRun 322 non-null int64 3 Runs 322 non-null int64 4 RBI 322 non-null int64 5 Walks 322 non-null int64 6 Years 322 non-null int64 7 CAtBat 322 non-null int64 8 CHits 322 non-null int64 9 CHmRun 322 non-null int64 10 CRuns 322 non-null int64 11 CRBI 322 non-null int64 12 CWalks 322 non-null int64 13 League 322 non-null category 14 Division 322 non-null category 15 PutOuts 322 non-null int64 16 Assists 322 non-null int64 17 Errors 322 non-null int64 18 Salary 263 non-null float64 19 NewLeague 322 non-null category dtypes: category(3), float64(1), int64(16) memory usage: 44.2 KB .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI CWalks League Division PutOuts Assists Errors Salary NewLeague 0 293 66 1 30 29 14 1 293 66 1 30 29 14 A E 446 33 20 NaN A 1 315 81 7 24 38 39 14 3449 835 69 321 414 375 N W 632 43 10 475.0 N 2 479 130 18 66 72 76 3 1624 457 63 224 266 263 A W 880 82 14 480.0 A 3 496 141 20 65 78 37 11 5628 1575 225 828 838 354 N E 200 11 3 500.0 N 4 321 87 10 39 42 30 2 396 101 12 48 46 33 N E 805 40 4 91.5 N hits.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI CWalks PutOuts Assists Errors Salary count 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.00000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 263.000000 mean 380.928571 101.024845 10.770186 50.909938 48.027950 38.742236 7.444099 2648.68323 717.571429 69.490683 358.795031 330.118012 260.239130 288.937888 106.913043 8.040373 535.925882 std 153.404981 46.454741 8.709037 26.024095 26.166895 21.639327 4.926087 2324.20587 654.472627 86.266061 334.105886 333.219617 267.058085 280.704614 136.854876 6.368359 451.118681 min 16.000000 1.000000 0.000000 0.000000 0.000000 0.000000 1.000000 19.00000 4.000000 0.000000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 67.500000 25% 255.250000 64.000000 4.000000 30.250000 28.000000 22.000000 4.000000 816.75000 209.000000 14.000000 100.250000 88.750000 67.250000 109.250000 7.000000 3.000000 190.000000 50% 379.500000 96.000000 8.000000 48.000000 44.000000 35.000000 6.000000 1928.00000 508.000000 37.500000 247.000000 220.500000 170.500000 212.000000 39.500000 6.000000 425.000000 75% 512.000000 137.000000 16.000000 69.000000 64.750000 53.000000 11.000000 3924.25000 1059.250000 90.000000 526.250000 426.250000 339.250000 325.000000 166.000000 11.000000 750.000000 max 687.000000 238.000000 40.000000 130.000000 121.000000 105.000000 24.000000 14053.00000 4256.000000 548.000000 2165.000000 1659.000000 1566.000000 1378.000000 492.000000 32.000000 2460.000000 hits = hits.dropna() sns.pairplot(hits, hue=\"Salary\") <seaborn.axisgrid.PairGrid at 0x72846cfd77d0> for col in [\"League\", \"Division\", \"NewLeague\"]: hits[col] = [1 if val == hits[col].iloc[0] else 0 for val in hits[col]] X = hits.drop(columns=[\"Salary\"]) y = hits[\"Salary\"] lambdas = 10**np.linspace(8, -2, 100) X_train, X_test, y_train, y_test = skm.train_test_split(X, y, test_size=0.1, random_state=0) kfold = skm.KFold(n_splits=5, shuffle=True, random_state=0) model = Pipeline(steps=[ ('scaler', StandardScaler()), ('ridge', skl.RidgeCV(alphas=lambdas, store_cv_results=True)) ] ) model.fit(X_train, y_train) model_pred = model.predict(X_test) MSE(model_pred, y_test), R2(model_pred, y_test) (99295.86827979995, 0.4448133917882484) ridgecv = model.named_steps['ridge'] err_path = ridgecv.cv_results_.mean(0) fig, ax = subplots() ax.plot(-np.log10(lambdas), err_path) ax.axvline(-np.log10(ridgecv.alpha_), c='k', ls='--') ax.set_ylim ([50000 ,250000]) ax.set_xlabel('$-\\log(\\lambda)$', fontsize=20) ax.set_ylabel('Cross -validated MSE', fontsize=20); <>:8: SyntaxWarning: invalid escape sequence '\\l' <>:8: SyntaxWarning: invalid escape sequence '\\l' /tmp/ipykernel_31051/3379189933.py:8: SyntaxWarning: invalid escape sequence '\\l' ax.set_xlabel('$-\\log(\\lambda)$', fontsize=20) ridgecv.coef_, ridgecv.alpha_ (array([-2.43878762e+02, 2.60488628e+02, -1.03873887e-01, -1.94743085e+01, -2.47831048e+00, 1.31955900e+02, -4.79502021e+01, -9.65621490e+01, 1.12083526e+02, 9.42043348e+01, 2.26196846e+02, 6.47739865e+01, -1.56211768e+02, 2.56043840e+01, -6.22373727e+01, 7.81558996e+01, 4.86000393e+01, -2.90786464e+01, -7.98183554e+00]), 2.6560877829466896) model = Pipeline(steps=[ ('scaler', StandardScaler()), ('lasso', skl.LassoCV(alphas=lambdas)) ] ) model.fit(X_train, y_train) model_pred = model.predict(X_test) MSE(model_pred, y_test), R2(model_pred, y_test) (100781.91070990668, 0.43806280005181397) lassocv = model.named_steps['lasso'] err_path = lassocv.mse_path_.mean(1) fig, ax = subplots() ax.plot(-np.log10(lambdas), err_path) ax.axvline(-np.log10(lassocv.alpha_), c='k', ls='--') ax.set_ylim ([50000 ,250000]) ax.set_xlabel('$-\\log(\\lambda)$', fontsize=20) ax.set_ylabel('Cross -validated MSE', fontsize=20); <>:8: SyntaxWarning: invalid escape sequence '\\l' <>:8: SyntaxWarning: invalid escape sequence '\\l' /tmp/ipykernel_31051/1786576076.py:8: SyntaxWarning: invalid escape sequence '\\l' ax.set_xlabel('$-\\log(\\lambda)$', fontsize=20) lassocv.coef_, lassocv.alpha_ (array([-285.68139176, 298.36986021, -0. , -16.64102469, 0. , 132.59353528, -39.83682438, -0. , 0. , 100.62310668, 270.53870113, 33.4568784 , -168.6634666 , 17.83798661, -59.0206921 , 78.97330083, 41.10553871, -19.38100744, 0. ]), 2.104904144512022)","title":"Demo6 2"},{"location":"demo6_3/","text":"import pandas as pd import numpy as np import seaborn as sns import sklearn.linear_model as skl import sklearn.model_selection as skm from ISLP import load_data from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.pipeline import Pipeline, make_pipeline from sklearn.metrics import mean_squared_error as MSE, r2_score as R2 from matplotlib.pyplot import subplots from sklearn.decomposition import PCA from sklearn.cross_decomposition import PLSRegression hits = load_data('Hitters') hits.info() hits.head() <class 'pandas.core.frame.DataFrame'> RangeIndex: 322 entries, 0 to 321 Data columns (total 20 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 AtBat 322 non-null int64 1 Hits 322 non-null int64 2 HmRun 322 non-null int64 3 Runs 322 non-null int64 4 RBI 322 non-null int64 5 Walks 322 non-null int64 6 Years 322 non-null int64 7 CAtBat 322 non-null int64 8 CHits 322 non-null int64 9 CHmRun 322 non-null int64 10 CRuns 322 non-null int64 11 CRBI 322 non-null int64 12 CWalks 322 non-null int64 13 League 322 non-null category 14 Division 322 non-null category 15 PutOuts 322 non-null int64 16 Assists 322 non-null int64 17 Errors 322 non-null int64 18 Salary 263 non-null float64 19 NewLeague 322 non-null category dtypes: category(3), float64(1), int64(16) memory usage: 44.2 KB .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI CWalks League Division PutOuts Assists Errors Salary NewLeague 0 293 66 1 30 29 14 1 293 66 1 30 29 14 A E 446 33 20 NaN A 1 315 81 7 24 38 39 14 3449 835 69 321 414 375 N W 632 43 10 475.0 N 2 479 130 18 66 72 76 3 1624 457 63 224 266 263 A W 880 82 14 480.0 A 3 496 141 20 65 78 37 11 5628 1575 225 828 838 354 N E 200 11 3 500.0 N 4 321 87 10 39 42 30 2 396 101 12 48 46 33 N E 805 40 4 91.5 N hits.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI CWalks PutOuts Assists Errors Salary count 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.00000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 322.000000 263.000000 mean 380.928571 101.024845 10.770186 50.909938 48.027950 38.742236 7.444099 2648.68323 717.571429 69.490683 358.795031 330.118012 260.239130 288.937888 106.913043 8.040373 535.925882 std 153.404981 46.454741 8.709037 26.024095 26.166895 21.639327 4.926087 2324.20587 654.472627 86.266061 334.105886 333.219617 267.058085 280.704614 136.854876 6.368359 451.118681 min 16.000000 1.000000 0.000000 0.000000 0.000000 0.000000 1.000000 19.00000 4.000000 0.000000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 67.500000 25% 255.250000 64.000000 4.000000 30.250000 28.000000 22.000000 4.000000 816.75000 209.000000 14.000000 100.250000 88.750000 67.250000 109.250000 7.000000 3.000000 190.000000 50% 379.500000 96.000000 8.000000 48.000000 44.000000 35.000000 6.000000 1928.00000 508.000000 37.500000 247.000000 220.500000 170.500000 212.000000 39.500000 6.000000 425.000000 75% 512.000000 137.000000 16.000000 69.000000 64.750000 53.000000 11.000000 3924.25000 1059.250000 90.000000 526.250000 426.250000 339.250000 325.000000 166.000000 11.000000 750.000000 max 687.000000 238.000000 40.000000 130.000000 121.000000 105.000000 24.000000 14053.00000 4256.000000 548.000000 2165.000000 1659.000000 1566.000000 1378.000000 492.000000 32.000000 2460.000000 hits = hits.dropna() # sns.pairplot(hits, hue=\"Salary\") for col in [\"League\", \"Division\", \"NewLeague\"]: hits[col] = [1 if val == hits[col].iloc[0] else 0 for val in hits[col]] X = hits.drop(columns=[\"Salary\"]) y = hits[\"Salary\"] X_train, X_test, y_train, y_test = skm.train_test_split(X, y, test_size=0.1, random_state=0, shuffle=True) kfold = skm.KFold(n_splits=5, shuffle=True, random_state=0) model = Pipeline(steps=[ ('scaler', StandardScaler()), ('pca', PCA(n_components=2)), ('ridge', skl.LinearRegression()) ] ) model.fit(X_train, y_train) model_pred = model.predict(X_test) MSE(model_pred, y_test), R2(model_pred, y_test) (115168.19165112973, 0.08221912624753136) pca = model.named_steps['pca'] pca.explained_variance_ratio_, pca.components_ (array([0.37711794, 0.22135976]), array([[ 0.20115935, 0.20029646, 0.19933906, 0.19554293, 0.23273539, 0.19688827, 0.28400759, 0.33247928, 0.33328639, 0.32069048, 0.33919628, 0.34243474, 0.3174305 , -0.03407424, -0.01843857, 0.08955967, 0.01826129, 0.01172887, -0.01779337], [ 0.37847546, 0.3715308 , 0.2414967 , 0.37768547, 0.31485639, 0.24561844, -0.26393601, -0.19810171, -0.18845451, -0.11530701, -0.17523351, -0.16877619, -0.19326804, -0.12451746, -0.01483749, 0.15513448, 0.15113156, 0.17792085, -0.09869745]])) param = {\"pca__n_components\": range(1, 20)} grid = skm.GridSearchCV(model, param, cv=kfold, scoring='neg_mean_squared_error') grid.fit(X_train, y_train) #sk-container-id-9 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-9 { color: var(--sklearn-color-text); } #sk-container-id-9 pre { padding: 0; } #sk-container-id-9 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-9 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-9 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-9 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-9 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-9 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-9 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-9 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-9 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-9 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-9 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-9 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-9 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-9 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-9 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-9 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-9 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-9 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-9 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-9 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-9 div.sk-label label.sk-toggleable__label, #sk-container-id-9 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-9 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-9 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-9 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-9 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-9 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-9 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-9 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-9 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-9 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-9 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-9 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } GridSearchCV(cv=KFold(n_splits=5, random_state=0, shuffle=True), estimator=Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=2)), ('ridge', LinearRegression())]), param_grid={'pca__n_components': range(1, 20)}, scoring='neg_mean_squared_error') In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. GridSearchCV ? Documentation for GridSearchCV i Fitted GridSearchCV(cv=KFold(n_splits=5, random_state=0, shuffle=True), estimator=Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=2)), ('ridge', LinearRegression())]), param_grid={'pca__n_components': range(1, 20)}, scoring='neg_mean_squared_error') best_estimator_: Pipeline Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=17)), ('ridge', LinearRegression())]) StandardScaler ? Documentation for StandardScaler StandardScaler() PCA ? Documentation for PCA PCA(n_components=17) LinearRegression ? Documentation for LinearRegression LinearRegression() err = grid.cv_results_['mean_test_score'] n_comp = param['pca__n_components'] fig, ax = subplots() ax.errorbar(n_comp, -err, yerr=grid.cv_results_['std_test_score'] / np.sqrt(19)) ax.set_xlabel('n components') ax.set_ylabel('mean val score') ax.set_xticks(n_comp[::2]); pls = PLSRegression(scale=True) param = {'n_components': range(1, 20)} grid = skm.GridSearchCV(pls, param, cv=kfold, scoring='neg_mean_squared_error') grid.fit(X_train, y_train) #sk-container-id-10 { /* Definition of color scheme common for light and dark mode */ --sklearn-color-text: #000; --sklearn-color-text-muted: #666; --sklearn-color-line: gray; /* Definition of color scheme for unfitted estimators */ --sklearn-color-unfitted-level-0: #fff5e6; --sklearn-color-unfitted-level-1: #f6e4d2; --sklearn-color-unfitted-level-2: #ffe0b3; --sklearn-color-unfitted-level-3: chocolate; /* Definition of color scheme for fitted estimators */ --sklearn-color-fitted-level-0: #f0f8ff; --sklearn-color-fitted-level-1: #d4ebff; --sklearn-color-fitted-level-2: #b3dbfd; --sklearn-color-fitted-level-3: cornflowerblue; /* Specific color for light theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black))); --sklearn-color-icon: #696969; @media (prefers-color-scheme: dark) { /* Redefinition of color scheme for dark theme */ --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111))); --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white))); --sklearn-color-icon: #878787; } } #sk-container-id-10 { color: var(--sklearn-color-text); } #sk-container-id-10 pre { padding: 0; } #sk-container-id-10 input.sk-hidden--visually { border: 0; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } #sk-container-id-10 div.sk-dashed-wrapped { border: 1px dashed var(--sklearn-color-line); margin: 0 0.4em 0.5em 0.4em; box-sizing: border-box; padding-bottom: 0.4em; background-color: var(--sklearn-color-background); } #sk-container-id-10 div.sk-container { /* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */ display: inline-block !important; position: relative; } #sk-container-id-10 div.sk-text-repr-fallback { display: none; } div.sk-parallel-item, div.sk-serial, div.sk-item { /* draw centered vertical line to link estimators */ background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background)); background-size: 2px 100%; background-repeat: no-repeat; background-position: center center; } /* Parallel-specific style estimator block */ #sk-container-id-10 div.sk-parallel-item::after { content: \"\"; width: 100%; border-bottom: 2px solid var(--sklearn-color-text-on-default-background); flex-grow: 1; } #sk-container-id-10 div.sk-parallel { display: flex; align-items: stretch; justify-content: center; background-color: var(--sklearn-color-background); position: relative; } #sk-container-id-10 div.sk-parallel-item { display: flex; flex-direction: column; } #sk-container-id-10 div.sk-parallel-item:first-child::after { align-self: flex-end; width: 50%; } #sk-container-id-10 div.sk-parallel-item:last-child::after { align-self: flex-start; width: 50%; } #sk-container-id-10 div.sk-parallel-item:only-child::after { width: 0; } /* Serial-specific style estimator block */ #sk-container-id-10 div.sk-serial { display: flex; flex-direction: column; align-items: center; background-color: var(--sklearn-color-background); padding-right: 1em; padding-left: 1em; } /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is clickable and can be expanded/collapsed. - Pipeline and ColumnTransformer use this feature and define the default style - Estimators will overwrite some part of the style using the `sk-estimator` class */ /* Pipeline and ColumnTransformer style (default) */ #sk-container-id-10 div.sk-toggleable { /* Default theme specific background. It is overwritten whether we have a specific estimator or a Pipeline/ColumnTransformer */ background-color: var(--sklearn-color-background); } /* Toggleable label */ #sk-container-id-10 label.sk-toggleable__label { cursor: pointer; display: flex; width: 100%; margin-bottom: 0; padding: 0.5em; box-sizing: border-box; text-align: center; align-items: start; justify-content: space-between; gap: 0.5em; } #sk-container-id-10 label.sk-toggleable__label .caption { font-size: 0.6rem; font-weight: lighter; color: var(--sklearn-color-text-muted); } #sk-container-id-10 label.sk-toggleable__label-arrow:before { /* Arrow on the left of the label */ content: \"\u25b8\"; float: left; margin-right: 0.25em; color: var(--sklearn-color-icon); } #sk-container-id-10 label.sk-toggleable__label-arrow:hover:before { color: var(--sklearn-color-text); } /* Toggleable content - dropdown */ #sk-container-id-10 div.sk-toggleable__content { max-height: 0; max-width: 0; overflow: hidden; text-align: left; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-10 div.sk-toggleable__content.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-10 div.sk-toggleable__content pre { margin: 0.2em; border-radius: 0.25em; color: var(--sklearn-color-text); /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-10 div.sk-toggleable__content.fitted pre { /* unfitted */ background-color: var(--sklearn-color-fitted-level-0); } #sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content { /* Expand drop-down */ max-height: 200px; max-width: 100%; overflow: auto; } #sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before { content: \"\u25be\"; } /* Pipeline/ColumnTransformer-specific style */ #sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-10 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { background-color: var(--sklearn-color-fitted-level-2); } /* Estimator-specific style */ /* Colorize estimator box */ #sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-10 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } #sk-container-id-10 div.sk-label label.sk-toggleable__label, #sk-container-id-10 div.sk-label label { /* The background is the default theme color */ color: var(--sklearn-color-text-on-default-background); } /* On hover, darken the color of the background */ #sk-container-id-10 div.sk-label:hover label.sk-toggleable__label { color: var(--sklearn-color-text); background-color: var(--sklearn-color-unfitted-level-2); } /* Label box, darken color on hover, fitted */ #sk-container-id-10 div.sk-label.fitted:hover label.sk-toggleable__label.fitted { color: var(--sklearn-color-text); background-color: var(--sklearn-color-fitted-level-2); } /* Estimator label */ #sk-container-id-10 div.sk-label label { font-family: monospace; font-weight: bold; display: inline-block; line-height: 1.2em; } #sk-container-id-10 div.sk-label-container { text-align: center; } /* Estimator-specific */ #sk-container-id-10 div.sk-estimator { font-family: monospace; border: 1px dotted var(--sklearn-color-border-box); border-radius: 0.25em; box-sizing: border-box; margin-bottom: 0.5em; /* unfitted */ background-color: var(--sklearn-color-unfitted-level-0); } #sk-container-id-10 div.sk-estimator.fitted { /* fitted */ background-color: var(--sklearn-color-fitted-level-0); } /* on hover */ #sk-container-id-10 div.sk-estimator:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-2); } #sk-container-id-10 div.sk-estimator.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-2); } /* Specification for estimator info (e.g. \"i\" and \"?\") */ /* Common style for \"i\" and \"?\" */ .sk-estimator-doc-link, a:link.sk-estimator-doc-link, a:visited.sk-estimator-doc-link { float: right; font-size: smaller; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1em; height: 1em; width: 1em; text-decoration: none !important; margin-left: 0.5em; text-align: center; /* unfitted */ border: var(--sklearn-color-unfitted-level-1) 1pt solid; color: var(--sklearn-color-unfitted-level-1); } .sk-estimator-doc-link.fitted, a:link.sk-estimator-doc-link.fitted, a:visited.sk-estimator-doc-link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ div.sk-estimator:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover, div.sk-label-container:hover .sk-estimator-doc-link:hover, .sk-estimator-doc-link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover, div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover, .sk-estimator-doc-link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } /* Span, style for the box shown on hovering the info icon */ .sk-estimator-doc-link span { display: none; z-index: 9999; position: relative; font-weight: normal; right: .2ex; padding: .5ex; margin: .5ex; width: min-content; min-width: 20ex; max-width: 50ex; color: var(--sklearn-color-text); box-shadow: 2pt 2pt 4pt #999; /* unfitted */ background: var(--sklearn-color-unfitted-level-0); border: .5pt solid var(--sklearn-color-unfitted-level-3); } .sk-estimator-doc-link.fitted span { /* fitted */ background: var(--sklearn-color-fitted-level-0); border: var(--sklearn-color-fitted-level-3); } .sk-estimator-doc-link:hover span { display: block; } /* \"?\"-specific style due to the `<a>` HTML tag */ #sk-container-id-10 a.estimator_doc_link { float: right; font-size: 1rem; line-height: 1em; font-family: monospace; background-color: var(--sklearn-color-background); border-radius: 1rem; height: 1rem; width: 1rem; text-decoration: none; /* unfitted */ color: var(--sklearn-color-unfitted-level-1); border: var(--sklearn-color-unfitted-level-1) 1pt solid; } #sk-container-id-10 a.estimator_doc_link.fitted { /* fitted */ border: var(--sklearn-color-fitted-level-1) 1pt solid; color: var(--sklearn-color-fitted-level-1); } /* On hover */ #sk-container-id-10 a.estimator_doc_link:hover { /* unfitted */ background-color: var(--sklearn-color-unfitted-level-3); color: var(--sklearn-color-background); text-decoration: none; } #sk-container-id-10 a.estimator_doc_link.fitted:hover { /* fitted */ background-color: var(--sklearn-color-fitted-level-3); } GridSearchCV(cv=KFold(n_splits=5, random_state=0, shuffle=True), estimator=PLSRegression(), param_grid={'n_components': range(1, 20)}, scoring='neg_mean_squared_error') In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. GridSearchCV ? Documentation for GridSearchCV i Fitted GridSearchCV(cv=KFold(n_splits=5, random_state=0, shuffle=True), estimator=PLSRegression(), param_grid={'n_components': range(1, 20)}, scoring='neg_mean_squared_error') best_estimator_: PLSRegression PLSRegression(n_components=11) PLSRegression ? Documentation for PLSRegression PLSRegression(n_components=11) err = grid.cv_results_['mean_test_score'] fig, ax = subplots() ax.errorbar(n_comp, -err, yerr=grid.cv_results_['std_test_score'] / np.sqrt(19)) ax.set_xlabel('n components') ax.set_ylabel('mean val score') ax.set_xticks(n_comp[::2]);","title":"Demo6 3"}]}